{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nTestFlow is a comprehensive test management platform built with a modern full-stack architecture. The application provides a complete solution for organizing, executing, and monitoring automated tests through an intuitive web interface. It features dashboard analytics, test case management, test suite organization, execution tracking, and detailed reporting capabilities. The platform is designed to streamline the testing workflow for development teams by centralizing test organization and providing real-time insights into test execution status.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side is built using React with TypeScript, utilizing a modern component-based architecture. The UI framework leverages shadcn/ui components built on top of Radix UI primitives for consistent design patterns. State management is handled through TanStack Query (React Query) for server state synchronization and caching. The routing system uses Wouter for lightweight client-side navigation. The styling approach combines Tailwind CSS for utility-first styling with CSS custom properties for theming support.\n\n## Backend Architecture\nThe server follows a REST API architecture using Express.js with TypeScript. The application implements a layered structure with route handlers, storage abstraction, and middleware for request logging and error handling. The storage layer uses an interface pattern (`IStorage`) to abstract database operations, enabling easy testing and potential database switching. The API provides endpoints for dashboard statistics, test management operations, and CRUD operations for test suites, cases, and runs.\n\n## Database Schema Design\nThe data model centers around three core entities: Test Suites (collections of related tests), Test Cases (individual test definitions), and Test Runs (execution records). The schema uses PostgreSQL with proper foreign key relationships - Test Cases belong to Test Suites, and Test Runs track executions of Test Cases. Each entity includes metadata like timestamps, status tracking, and descriptive fields. The design supports hierarchical organization and comprehensive audit trails of test execution history.\n\n## Development and Build System\nThe project uses Vite as the build tool for fast development and optimized production builds. The development setup includes hot module replacement for rapid iteration. ESBuild handles server-side bundling for production deployment. The TypeScript configuration supports modern ES modules with path mapping for clean imports. The build process generates separate client and server bundles optimized for their respective environments.\n\n## Styling and UI System\nThe application implements a comprehensive design system using Tailwind CSS with a custom configuration. The styling approach uses CSS custom properties for theme variables, enabling consistent color schemes and spacing. The component library is built on shadcn/ui, providing accessible and customizable UI primitives. The design supports responsive layouts with mobile-first considerations and includes dark mode capabilities through CSS variables.\n\n# External Dependencies\n\n## Database and ORM\n- **Neon Database**: Serverless PostgreSQL hosting solution using `@neondatabase/serverless`\n- **Drizzle ORM**: Type-safe database toolkit for schema management and queries\n- **Drizzle Kit**: CLI tool for database migrations and schema synchronization\n\n## Frontend Libraries\n- **React**: Core UI library with TypeScript support\n- **TanStack Query**: Server state management and data synchronization\n- **Wouter**: Lightweight client-side routing solution\n- **React Hook Form**: Form state management with validation\n- **Zod**: Schema validation for form data and API contracts\n\n## UI Component System\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component library based on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for component variant management\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer","size_bytes":4411},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTestSuiteSchema, insertTestCaseSchema, insertTestRunSchema, insertTestExecutionSchema, insertDefectSchema, insertRequirementSchema, insertTestScenarioSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// AI Response Validation Schemas\nconst aiScenarioSchema = z.object({\n  scenario_id: z.string().min(1, \"Scenario ID is required\").max(50, \"Scenario ID too long\"),\n  title: z.string().min(1, \"Title is required\").max(200, \"Title too long\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  test_type: z.enum([\"Functional\", \"Integration\", \"Regression\", \"Security\", \"Performance\", \"Usability\", \"API\", \"UI\", \"Database\"], {\n    errorMap: () => ({ message: \"Invalid test type\" })\n  }),\n  priority: z.enum([\"High\", \"Medium\", \"Low\"], {\n    errorMap: () => ({ message: \"Priority must be High, Medium, or Low\" })\n  })\n});\n\nconst aiResponseSchema = z.object({\n  scenarios: z.array(aiScenarioSchema).min(1, \"At least one scenario is required\").max(10, \"Too many scenarios\")\n});\n\n// AI Test Case Response Validation Schema\nconst aiTestCaseSchema = z.object({\n  title: z.string().min(1, \"Test case title is required\").max(200, \"Title too long\"),\n  preconditions: z.string().optional(),\n  steps: z.array(z.string()).min(1, \"At least one test step is required\"),\n  test_data: z.string().optional(),\n  expected_result: z.string().min(1, \"Expected result is required\")\n});\n\nconst aiTestCaseResponseSchema = z.object({\n  test_cases: z.array(aiTestCaseSchema).min(1, \"At least one test case is required\").max(20, \"Too many test cases\")\n});\n// Import ES modules with proper TypeScript handling\nimport { generateWithAI } from \"../services/aiService.js\";\nimport { generateScenarioPrompt } from \"../promptGenerators/generateScenarioPrompt.js\";\nimport { generateTestCasePrompt } from \"../promptGenerators/generateTestCasePrompt.js\";\n\n// Map to track running test execution timers for cancellation\nconst runningTestTimers = new Map<string, NodeJS.Timeout>();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Dashboard Stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Recent Activity\n  app.get(\"/api/dashboard/activity\", async (req, res) => {\n    try {\n      const activity = await storage.getRecentActivity();\n      res.json(activity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  // Test Suites Routes\n  app.get(\"/api/test-suites\", async (req, res) => {\n    try {\n      const suites = await storage.getTestSuites();\n      res.json(suites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test suites\" });\n    }\n  });\n\n  app.get(\"/api/test-suites/with-stats\", async (req, res) => {\n    try {\n      const suites = await storage.getTestSuitesWithStats();\n      res.json(suites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test suites with stats\" });\n    }\n  });\n\n  app.get(\"/api/test-suites/:id\", async (req, res) => {\n    try {\n      const suite = await storage.getTestSuite(req.params.id);\n      if (!suite) {\n        return res.status(404).json({ message: \"Test suite not found\" });\n      }\n      res.json(suite);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test suite\" });\n    }\n  });\n\n  app.post(\"/api/test-suites\", async (req, res) => {\n    try {\n      const validatedData = insertTestSuiteSchema.parse(req.body);\n      const suite = await storage.createTestSuite(validatedData);\n      res.status(201).json(suite);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test suite data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test suite\" });\n    }\n  });\n\n  app.put(\"/api/test-suites/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTestSuiteSchema.partial().parse(req.body);\n      const suite = await storage.updateTestSuite(req.params.id, validatedData);\n      if (!suite) {\n        return res.status(404).json({ message: \"Test suite not found\" });\n      }\n      res.json(suite);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test suite data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update test suite\" });\n    }\n  });\n\n  app.delete(\"/api/test-suites/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTestSuite(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Test suite not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete test suite\" });\n    }\n  });\n\n  // Test Cases Routes\n  app.get(\"/api/test-cases\", async (req, res) => {\n    try {\n      const testCases = await storage.getTestCasesWithSuite();\n      res.json(testCases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test cases\" });\n    }\n  });\n\n  app.get(\"/api/test-cases/:id\", async (req, res) => {\n    try {\n      const testCase = await storage.getTestCase(req.params.id);\n      if (!testCase) {\n        return res.status(404).json({ message: \"Test case not found\" });\n      }\n      res.json(testCase);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test case\" });\n    }\n  });\n\n  app.get(\"/api/test-suites/:suiteId/test-cases\", async (req, res) => {\n    try {\n      const testCases = await storage.getTestCasesBySuite(req.params.suiteId);\n      res.json(testCases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test cases for suite\" });\n    }\n  });\n\n  app.post(\"/api/test-cases\", async (req, res) => {\n    try {\n      const validatedData = insertTestCaseSchema.parse(req.body);\n      const testCase = await storage.createTestCase(validatedData);\n      res.status(201).json(testCase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test case data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test case\" });\n    }\n  });\n\n  app.put(\"/api/test-cases/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTestCaseSchema.partial().parse(req.body);\n      const testCase = await storage.updateTestCase(req.params.id, validatedData);\n      if (!testCase) {\n        return res.status(404).json({ message: \"Test case not found\" });\n      }\n      res.json(testCase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test case data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update test case\" });\n    }\n  });\n\n  app.delete(\"/api/test-cases/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTestCase(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Test case not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete test case\" });\n    }\n  });\n\n  // Test Run Routes\n  app.get(\"/api/test-runs\", async (req, res) => {\n    try {\n      const testRuns = await storage.getTestRuns();\n      res.json(testRuns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test runs\" });\n    }\n  });\n\n  app.get(\"/api/test-cases/:testCaseId/runs\", async (req, res) => {\n    try {\n      const testRuns = await storage.getTestRunsByTestCase(req.params.testCaseId);\n      res.json(testRuns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test runs for test case\" });\n    }\n  });\n\n  app.post(\"/api/test-runs\", async (req, res) => {\n    try {\n      const validatedData = insertTestRunSchema.parse(req.body);\n      const testRun = await storage.createTestRun(validatedData);\n      \n      // Update test case status only if the run is starting immediately\n      if (validatedData.testCaseId && testRun.status === 'in_progress') {\n        await storage.updateTestCase(validatedData.testCaseId, { status: 'running' });\n      }\n      \n      res.status(201).json(testRun);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test run data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test run\" });\n    }\n  });\n\n  app.put(\"/api/test-runs/:id\", async (req, res) => {\n    try {\n      const validatedData = z.object({\n        status: z.enum(['planned', 'in_progress', 'completed', 'aborted']),\n        endTime: z.string().datetime().optional(),\n        errorMessage: z.string().optional(),\n      }).parse(req.body);\n\n      const endTime = validatedData.endTime ? new Date(validatedData.endTime) : undefined;\n      \n      const testRun = await storage.updateTestRun(req.params.id, {\n        ...validatedData,\n        endTime\n      });\n      \n      if (!testRun) {\n        return res.status(404).json({ message: \"Test run not found\" });\n      }\n\n      // Update test case status with proper mapping\n      if (testRun.testCaseId) {\n        const updateData: any = {};\n        \n        // Map TestRun status to appropriate TestCase status\n        if (validatedData.status === 'in_progress') {\n          updateData.status = 'running';\n        } else if (validatedData.status === 'completed') {\n          // Don't automatically set test case status for completed runs\n          // The test result should be determined by actual execution results\n        } else if (validatedData.status === 'aborted') {\n          updateData.status = 'pending'; // Reset to pending when aborted\n        }\n        // 'planned' status doesn't require test case status change\n        \n        if (testRun.duration !== null) {\n          updateData.duration = testRun.duration;\n        }\n        \n        // Only update if there are changes to make\n        if (Object.keys(updateData).length > 0) {\n          await storage.updateTestCase(testRun.testCaseId, updateData);\n        }\n      }\n\n      res.json(testRun);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test run data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update test run\" });\n    }\n  });\n\n  // Test Execution Actions\n  app.post(\"/api/test-cases/:id/run\", async (req, res) => {\n    try {\n      const testCase = await storage.getTestCase(req.params.id);\n      if (!testCase) {\n        return res.status(404).json({ message: \"Test case not found\" });\n      }\n\n      // Create a new test run\n      const testRun = await storage.createTestRun({\n        testCaseId: testCase.id,\n        status: 'in_progress',\n      });\n\n      // Update test case status\n      await storage.updateTestCase(testCase.id, { status: 'running' });\n\n      // Simulate test execution completion after a random time (2-10 seconds)\n      const executionTime = Math.random() * 8000 + 2000; // 2-10 seconds\n      const timer = setTimeout(async () => {\n        try {\n          // Check if the test run is still running (could have been stopped)\n          const currentRun = await storage.getTestRun(testRun.id);\n          if (!currentRun || currentRun.status !== 'in_progress') {\n            // Test was stopped, don't update status\n            runningTestTimers.delete(testRun.id);\n            return;\n          }\n\n          // Randomly determine if test passes or fails (80% pass rate)\n          const testPassed = Math.random() < 0.8;\n          const testCaseResult = testPassed ? 'passed' : 'failed';\n          \n          // Update the test run with completion status (domain: run lifecycle)\n          const updatedRun = await storage.updateTestRun(testRun.id, {\n            status: 'completed',\n            endTime: new Date(),\n            errorMessage: testPassed ? null : 'Test execution failed due to assertion error'\n          });\n          \n          // Update the test case with final result (domain: test result)\n          if (updatedRun) {\n            const updateData = {\n              status: testCaseResult,\n              duration: updatedRun.duration || Math.round(executionTime)\n            };\n            await storage.updateTestCase(testCase.id, updateData);\n          }\n          \n          // Clean up timer reference\n          runningTestTimers.delete(testRun.id);\n        } catch (error) {\n          console.error('Failed to complete test execution:', error);\n          // Fallback: mark as failed only if still running\n          try {\n            const currentRun = await storage.getTestRun(testRun.id);\n            if (currentRun && currentRun.status === 'in_progress') {\n              await storage.updateTestRun(testRun.id, {\n                status: 'completed',\n                endTime: new Date(),\n                errorMessage: 'Test execution timed out or failed to complete'\n              });\n              const fallbackUpdateData = {\n                status: 'failed' as any,\n                duration: Math.round(executionTime)\n              };\n              await storage.updateTestCase(testCase.id, fallbackUpdateData);\n            }\n            runningTestTimers.delete(testRun.id);\n          } catch (fallbackError) {\n            console.error('Failed to handle test completion fallback:', fallbackError);\n            runningTestTimers.delete(testRun.id);\n          }\n        }\n      }, executionTime);\n\n      // Track the timer for cancellation\n      runningTestTimers.set(testRun.id, timer);\n\n      res.json({ message: \"Test execution started\", testRun });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start test execution\" });\n    }\n  });\n\n  app.post(\"/api/test-cases/:id/stop\", async (req, res) => {\n    try {\n      const testCase = await storage.getTestCase(req.params.id);\n      if (!testCase) {\n        return res.status(404).json({ message: \"Test case not found\" });\n      }\n\n      // Find the running test run and stop it\n      const testRuns = await storage.getTestRunsByTestCase(testCase.id);\n      const runningTestRun = testRuns.find(tr => tr.status === 'in_progress');\n      \n      if (runningTestRun) {\n        // Cancel the automatic completion timer if it exists\n        const timer = runningTestTimers.get(runningTestRun.id);\n        if (timer) {\n          clearTimeout(timer);\n          runningTestTimers.delete(runningTestRun.id);\n        }\n        \n        // Update the test run to aborted status\n        await storage.updateTestRun(runningTestRun.id, {\n          status: 'aborted',\n          endTime: new Date(),\n        });\n      }\n\n      // Update test case status\n      await storage.updateTestCase(testCase.id, { status: 'pending' });\n\n      res.json({ message: \"Test execution stopped\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to stop test execution\" });\n    }\n  });\n\n  // Requirements CRUD Operations\n  app.get(\"/api/requirements\", async (req, res) => {\n    try {\n      const requirements = await storage.getRequirements();\n      res.json(requirements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch requirements\" });\n    }\n  });\n\n  app.post(\"/api/requirements\", async (req, res) => {\n    try {\n      const validatedData = insertRequirementSchema.parse(req.body);\n      const requirement = await storage.createRequirement(validatedData);\n      res.status(201).json(requirement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid requirement data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create requirement\" });\n    }\n  });\n\n  app.put(\"/api/requirements/:id\", async (req, res) => {\n    try {\n      const validatedData = insertRequirementSchema.partial().parse(req.body);\n      const requirement = await storage.updateRequirement(req.params.id, validatedData);\n      if (!requirement) {\n        return res.status(404).json({ message: \"Requirement not found\" });\n      }\n      res.json(requirement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid requirement data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update requirement\" });\n    }\n  });\n\n  app.delete(\"/api/requirements/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteRequirement(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Requirement not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete requirement\" });\n    }\n  });\n\n  // Requirements AI Generation Route\n  app.post(\"/api/requirements/:reqId/generate-scenarios\", async (req, res) => {\n    try {\n      const requirementId = req.params.reqId;\n      \n      // Fetch the requirement from the database\n      const requirement = await storage.getRequirement(requirementId);\n      if (!requirement) {\n        return res.status(404).json({ message: \"Requirement not found\" });\n      }\n\n      // Generate AI prompt\n      const prompt = generateScenarioPrompt(requirement);\n      \n      // Call AI service\n      const aiResponse = await generateWithAI(prompt);\n      \n      // Extract and parse JSON from AI response (handle code fences and extra text)\n      let parsedResponse;\n      try {\n        // First try direct parsing\n        try {\n          parsedResponse = JSON.parse(aiResponse);\n        } catch (directParseError) {\n          console.log('Direct JSON parse failed, attempting extraction...');\n          \n          // Try to extract JSON from code fences or surrounding text\n          const jsonMatch = aiResponse.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/) || \n                           aiResponse.match(/(\\{[\\s\\S]*\\})/);\n          \n          if (jsonMatch) {\n            parsedResponse = JSON.parse(jsonMatch[1]);\n          } else {\n            throw directParseError;\n          }\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', parseError);\n        console.error('AI Response content:', aiResponse.substring(0, 500) + '...');\n        return res.status(500).json({ \n          message: \"AI service returned invalid JSON format\",\n          details: \"The AI response could not be parsed as valid JSON. Please try again.\"\n        });\n      }\n\n      // Validate response structure with Zod\n      const validationResult = aiResponseSchema.safeParse(parsedResponse);\n      if (!validationResult.success) {\n        console.error('AI response validation failed:', validationResult.error);\n        return res.status(500).json({ \n          message: \"AI service returned invalid response format\",\n          details: `Validation errors: ${validationResult.error.issues.map(i => i.message).join(', ')}`\n        });\n      }\n\n      const validatedResponse = validationResult.data;\n\n      // Save the new test scenarios to the database with detailed tracking\n      const scenarioResults = [];\n      const createdScenarios = [];\n      const errors = [];\n\n      for (const scenario of validatedResponse.scenarios) {\n        try {\n          // Normalize data before database insertion\n          const scenarioData = {\n            scenarioId: scenario.scenario_id,\n            title: scenario.title.trim(),\n            description: scenario.description.trim(),\n            linkedRequirementId: requirementId,\n            module: requirement.module || 'General',\n            testType: scenario.test_type.toLowerCase(), // Normalize to lowercase\n            priority: scenario.priority.toLowerCase(), // Normalize to lowercase\n            author: requirement.author,\n            status: \"draft\"\n          };\n\n          const newScenario = await storage.createTestScenario(scenarioData);\n          createdScenarios.push(newScenario);\n          scenarioResults.push({\n            scenario_id: scenario.scenario_id,\n            title: scenario.title,\n            status: 'created',\n            id: newScenario.id\n          });\n        } catch (dbError) {\n          console.error(`Failed to save scenario ${scenario.scenario_id}:`, dbError);\n          errors.push({\n            scenario_id: scenario.scenario_id,\n            title: scenario.title,\n            status: 'failed',\n            error: dbError.message || 'Database error'\n          });\n          scenarioResults.push({\n            scenario_id: scenario.scenario_id,\n            title: scenario.title,\n            status: 'failed',\n            error: dbError.message || 'Database error'\n          });\n        }\n      }\n\n      // Determine response status code based on results\n      const successCount = createdScenarios.length;\n      const totalCount = validatedResponse.scenarios.length;\n      \n      if (successCount === 0) {\n        return res.status(500).json({ \n          message: \"Failed to save any scenarios to database\",\n          details: \"All scenario creation attempts failed\",\n          requirement: {\n            id: requirement.id,\n            title: requirement.title\n          },\n          results: scenarioResults,\n          summary: {\n            total: totalCount,\n            created: successCount,\n            failed: errors.length\n          }\n        });\n      }\n\n      // Return detailed results (207 Multi-Status if partial success, 201 if all succeeded)\n      const statusCode = successCount === totalCount ? 201 : 207;\n      res.status(statusCode).json({\n        message: successCount === totalCount ? \n          `Successfully generated ${successCount} test scenarios` :\n          `Generated ${successCount} of ${totalCount} test scenarios`,\n        requirement: {\n          id: requirement.id,\n          title: requirement.title\n        },\n        scenarios: createdScenarios,\n        results: scenarioResults,\n        summary: {\n          total: totalCount,\n          created: successCount,\n          failed: errors.length\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Error in generate-scenarios route:', error);\n      \n      // Handle specific error types\n      if (error.message && error.message.includes('DEEPSEEK_API_KEY')) {\n        return res.status(500).json({ \n          message: \"AI service configuration error\",\n          details: \"DeepSeek API key is not configured\"\n        });\n      } else if (error.message && (error.message.includes('Network error') || error.message.includes('connection'))) {\n        return res.status(503).json({ \n          message: \"AI service temporarily unavailable\",\n          details: \"Unable to connect to DeepSeek API. Please try again later.\"\n        });\n      } else if (error.message && error.message.includes('Rate limit')) {\n        return res.status(429).json({ \n          message: \"AI service rate limit exceeded\",\n          details: \"Please wait before making another request\"\n        });\n      } else {\n        return res.status(500).json({ \n          message: \"Failed to generate test scenarios\",\n          details: error.message || 'Unknown error occurred'\n        });\n      }\n    }\n  });\n\n  // Test Scenarios CRUD Operations\n  app.get(\"/api/test-scenarios\", async (req, res) => {\n    try {\n      const scenarios = await storage.getTestScenarios();\n      res.json(scenarios);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test scenarios\" });\n    }\n  });\n\n  app.post(\"/api/test-scenarios\", async (req, res) => {\n    try {\n      const validatedData = insertTestScenarioSchema.parse(req.body);\n      const scenario = await storage.createTestScenario(validatedData);\n      res.status(201).json(scenario);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test scenario data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test scenario\" });\n    }\n  });\n\n  app.put(\"/api/test-scenarios/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTestScenarioSchema.partial().parse(req.body);\n      const scenario = await storage.updateTestScenario(req.params.id, validatedData);\n      if (!scenario) {\n        return res.status(404).json({ message: \"Test scenario not found\" });\n      }\n      res.json(scenario);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test scenario data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update test scenario\" });\n    }\n  });\n\n  app.delete(\"/api/test-scenarios/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTestScenario(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Test scenario not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete test scenario\" });\n    }\n  });\n\n// POST /api/scenarios/:scenarioId/generate-test-cases - Generate test cases from a scenario using AI\napp.post('/api/scenarios/:scenarioId/generate-test-cases', async (req, res) => {\n  try {\n    const { scenarioId } = req.params;\n    \n    if (!scenarioId || typeof scenarioId !== 'string') {\n      return res.status(400).json({ \n        message: \"Invalid scenario ID\",\n        details: \"scenarioId parameter is required and must be a string\"\n      });\n    }\n\n    // Fetch the scenario from the database\n    const scenario = await storage.getTestScenario(scenarioId);\n    if (!scenario) {\n      return res.status(404).json({ \n        message: \"Test scenario not found\",\n        details: `No scenario found with ID: ${scenarioId}`\n      });\n    }\n\n    console.log(`Generating test cases for scenario: ${scenario.title} (${scenario.scenarioId})`);\n\n    // Create the AI prompt\n    const prompt = generateTestCasePrompt({\n      scenario_id: scenario.scenarioId || scenario.id,\n      title: scenario.title,\n      description: scenario.description || '',\n      test_type: scenario.testType || 'Functional',\n      priority: scenario.priority || 'Medium'\n    });\n\n    // Call AI service\n    const aiResponse = await generateWithAI(prompt);\n    \n    // Extract and parse JSON from AI response (handle code fences and extra text)\n    let parsedResponse;\n    try {\n      // First try direct parsing\n      try {\n        parsedResponse = JSON.parse(aiResponse);\n      } catch (directParseError) {\n        console.log('Direct JSON parse failed, attempting extraction...');\n        \n        // Try to extract JSON from code fences or surrounding text\n        const jsonMatch = aiResponse.match(/```(?:json)?\\s*(\\{[\\s\\S]*?\\})\\s*```/) || \n                         aiResponse.match(/(\\{[\\s\\S]*\\})/);\n        \n        if (jsonMatch) {\n          parsedResponse = JSON.parse(jsonMatch[1]);\n        } else {\n          throw directParseError;\n        }\n      }\n    } catch (parseError) {\n      console.error('Failed to parse AI response:', parseError);\n      console.error('AI Response content:', aiResponse.substring(0, 500) + '...');\n      return res.status(500).json({ \n        message: \"AI service returned invalid JSON format\",\n        details: \"The AI response could not be parsed as valid JSON. Please try again.\"\n      });\n    }\n\n    // Validate response structure with Zod\n    let validatedResponse;\n    try {\n      validatedResponse = aiTestCaseResponseSchema.parse(parsedResponse);\n    } catch (validationError) {\n      console.error('AI response validation failed:', validationError);\n      return res.status(500).json({ \n        message: \"AI service returned invalid response format\",\n        details: validationError instanceof z.ZodError ? \n          validationError.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ') :\n          \"Response structure validation failed\"\n      });\n    }\n\n    // Save the new test cases to the database with detailed tracking\n    const testCaseResults = [];\n    const createdTestCases = [];\n    const errors = [];\n\n    for (const testCase of validatedResponse.test_cases) {\n      try {\n        // Normalize data before database insertion\n        const testCaseData = {\n          title: testCase.title?.trim(),\n          linkedScenarioId: scenario.id,\n          preconditions: testCase.preconditions?.trim(),\n          testSteps: testCase.steps ? JSON.stringify(testCase.steps) : null,\n          testData: testCase.test_data?.trim(),\n          expectedResult: testCase.expected_result?.trim(),\n          priority: scenario.priority || 'medium',\n          module: scenario.module || 'General',\n          testType: 'manual',\n          author: scenario.author,\n          automationStatus: 'not_automated',\n          status: 'pending'\n        };\n\n        const newTestCase = await storage.createTestCase(testCaseData);\n        createdTestCases.push(newTestCase);\n        testCaseResults.push({\n          title: testCase.title,\n          status: 'created',\n          id: newTestCase.id\n        });\n      } catch (dbError) {\n        console.error(`Failed to save test case ${testCase.title}:`, dbError);\n        errors.push({\n          title: testCase.title,\n          status: 'failed',\n          error: dbError.message || 'Database error'\n        });\n        testCaseResults.push({\n          title: testCase.title,\n          status: 'failed',\n          error: dbError.message || 'Database error'\n        });\n      }\n    }\n\n    // Determine response status code based on results\n    const successCount = createdTestCases.length;\n    const totalCount = parsedResponse.test_cases.length;\n    \n    if (successCount === 0) {\n      return res.status(500).json({ \n        message: \"Failed to save any test cases to database\",\n        details: \"All test case creation attempts failed\",\n        scenario: {\n          id: scenario.id,\n          title: scenario.title\n        },\n        results: testCaseResults,\n        summary: {\n          total: totalCount,\n          created: successCount,\n          failed: errors.length\n        }\n      });\n    }\n\n    // Return detailed results (207 Multi-Status if partial success, 201 if all succeeded)\n    const statusCode = successCount === totalCount ? 201 : 207;\n    res.status(statusCode).json({\n      message: successCount === totalCount ? \n        `Successfully generated ${successCount} test cases` :\n        `Generated ${successCount} of ${totalCount} test cases`,\n      scenario: {\n        id: scenario.id,\n        title: scenario.title\n      },\n      testCases: createdTestCases,\n      results: testCaseResults,\n      summary: {\n        total: totalCount,\n        created: successCount,\n        failed: errors.length\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Error in generate-test-cases route:', error);\n    \n    // Handle specific error types\n    if (error.message && error.message.includes('DEEPSEEK_API_KEY')) {\n      return res.status(500).json({ \n        message: \"AI service configuration error\",\n        details: \"DeepSeek API key is not configured\"\n      });\n    } else if (error.message && (error.message.includes('Network error') || error.message.includes('connection'))) {\n      return res.status(503).json({ \n        message: \"AI service temporarily unavailable\",\n        details: \"Unable to connect to DeepSeek API. Please try again later.\"\n      });\n    } else if (error.message && error.message.includes('Rate limit')) {\n      return res.status(429).json({ \n        message: \"AI service rate limit exceeded\",\n        details: \"Please wait before making another request\"\n      });\n    } else {\n      return res.status(500).json({ \n        message: \"Failed to generate test cases\",\n        details: error.message || 'Unknown error occurred'\n      });\n    }\n  }\n});\n\n// PUT /api/test-executions/:executionId - Update test execution with manual results and auto-create defects for failures\napp.put('/api/test-executions/:executionId', async (req, res) => {\n  try {\n    const { executionId } = req.params;\n    const { actual_result, execution_status, evidence_url } = req.body;\n    \n    // Validate input parameters\n    if (!executionId || typeof executionId !== 'string') {\n      return res.status(400).json({ \n        message: \"Invalid execution ID\",\n        details: \"executionId parameter is required and must be a string\"\n      });\n    }\n\n    if (!execution_status || !['pass', 'fail', 'blocked', 'not_executed', 'skip'].includes(execution_status)) {\n      return res.status(400).json({ \n        message: \"Invalid execution status\",\n        details: \"execution_status must be one of: pass, fail, blocked, not_executed, skip\"\n      });\n    }\n\n    // Get the execution record\n    const execution = await storage.getTestExecution(executionId);\n    if (!execution) {\n      return res.status(404).json({ \n        message: \"Test execution not found\",\n        details: `No test execution found with ID: ${executionId}`\n      });\n    }\n\n    // Update the execution record\n    const executionUpdate = {\n      actualResult: actual_result?.trim(),\n      executionStatus: execution_status,\n      executedAt: new Date(),\n      evidenceUrl: evidence_url?.trim() || null\n    };\n\n    const updatedExecution = await storage.updateTestExecution(executionId, executionUpdateData);\n    \n    if (!updatedExecution) {\n      return res.status(500).json({ \n        message: \"Failed to update test execution\",\n        details: \"Database update operation failed\"\n      });\n    }\n\n    let newDefect = null;\n    \n    // Auto-create defect if execution failed\n    if (execution_status === 'fail') {\n      try {\n        // Get the associated test case for defect details\n        const testCase = execution.testCaseId ? await storage.getTestCase(execution.testCaseId) : null;\n        \n        const defectData = {\n          title: `Failed Test: ${testCase?.title || testCase?.name || 'Unknown Test'}`,\n          description: actual_result?.trim() || 'Test execution failed',\n          stepsToReproduce: testCase?.testSteps ? \n            (typeof testCase.testSteps === 'string' ? testCase.testSteps : JSON.stringify(testCase.testSteps)) : \n            'Follow test case steps',\n          expectedResult: testCase?.expectedResult || 'Test should pass',\n          actualResult: actual_result?.trim() || 'Test failed',\n          severity: 'medium',\n          priority: testCase?.priority || 'medium',\n          status: 'new',\n          module: testCase?.module || 'General',\n          environment: 'development',\n          reportedBy: 'System (Auto-generated)',\n          linkedTestCaseId: execution.testCaseId,\n          linkedRequirementId: testCase?.linkedRequirementId || null\n        };\n\n        newDefect = await storage.createDefect(defectData);\n        console.log(`Auto-created defect ${newDefect.id} for failed test execution ${executionId}`);\n      } catch (defectError) {\n        console.error('Failed to create automatic defect:', defectError);\n        // Don't fail the execution update if defect creation fails\n      }\n    }\n\n    // Return the updated execution and new defect ID\n    const response = {\n      message: `Test execution updated successfully`,\n      execution: updatedExecution,\n      defect: newDefect ? {\n        id: newDefect.id,\n        title: newDefect.title,\n        status: newDefect.status\n      } : null\n    };\n\n    res.status(200).json(response);\n\n  } catch (error: any) {\n    console.error('Error in update test execution route:', error);\n    \n    return res.status(500).json({ \n      message: \"Failed to update test execution\",\n      details: error.message || 'Unknown error occurred'\n    });\n  }\n});\n\n// GET /api/defects/dashboard/stats - Get defect counts grouped by status, severity, and priority\napp.get('/api/defects/dashboard/stats', async (req, res) => {\n  try {\n    const { project, module } = req.query;\n    \n    // SQL query for defect dashboard statistics\n    let defectStatsQuery = `\n      SELECT \n        status,\n        severity,\n        priority,\n        COUNT(*) as count\n      FROM defects \n    `;\n    \n    const conditions = [];\n    const params = [];\n    \n    if (project && typeof project === 'string') {\n      conditions.push('module = $' + (params.length + 1));\n      params.push(project);\n    }\n    \n    if (module && typeof module === 'string') {\n      conditions.push('module = $' + (params.length + 1));\n      params.push(module);\n    }\n    \n    if (conditions.length > 0) {\n      defectStatsQuery += ' WHERE ' + conditions.join(' AND ');\n    }\n    \n    defectStatsQuery += `\n      GROUP BY status, severity, priority\n      ORDER BY \n        CASE status \n          WHEN 'new' THEN 1\n          WHEN 'assigned' THEN 2\n          WHEN 'in_progress' THEN 3\n          WHEN 'resolved' THEN 4\n          WHEN 'closed' THEN 5\n          WHEN 'reopened' THEN 6\n          ELSE 7\n        END,\n        CASE severity \n          WHEN 'critical' THEN 1\n          WHEN 'high' THEN 2\n          WHEN 'medium' THEN 3\n          WHEN 'low' THEN 4\n          ELSE 5\n        END,\n        CASE priority \n          WHEN 'high' THEN 1\n          WHEN 'medium' THEN 2\n          WHEN 'low' THEN 3\n          ELSE 4\n        END\n    `;\n    \n    // Additional summary queries\n    const summaryQuery = `\n      SELECT \n        COUNT(*) as total_defects,\n        COUNT(CASE WHEN status = 'new' THEN 1 END) as new_defects,\n        COUNT(CASE WHEN status = 'assigned' THEN 1 END) as assigned_defects,\n        COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_defects,\n        COUNT(CASE WHEN status = 'resolved' THEN 1 END) as resolved_defects,\n        COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_defects,\n        COUNT(CASE WHEN severity = 'critical' THEN 1 END) as critical_defects,\n        COUNT(CASE WHEN severity = 'high' THEN 1 END) as high_severity_defects\n      FROM defects\n      ${conditions.length > 0 ? 'WHERE ' + conditions.join(' AND ') : ''}\n    `;\n    \n    // For demonstration, return the SQL queries\n    // In production, these would be executed against the database\n    res.status(200).json({\n      message: \"Defect dashboard statistics queries\",\n      queries: {\n        defectStats: {\n          sql: defectStatsQuery,\n          params: params,\n          description: \"Groups defects by status, severity, and priority with counts\"\n        },\n        summary: {\n          sql: summaryQuery,\n          params: params,\n          description: \"Provides summary counts by status and severity\"\n        }\n      },\n      // Mock data for demonstration\n      mockData: {\n        groupedStats: [\n          { status: 'new', severity: 'critical', priority: 'high', count: 3 },\n          { status: 'new', severity: 'high', priority: 'high', count: 5 },\n          { status: 'assigned', severity: 'medium', priority: 'medium', count: 8 },\n          { status: 'in_progress', severity: 'low', priority: 'low', count: 2 },\n          { status: 'resolved', severity: 'medium', priority: 'medium', count: 12 }\n        ],\n        summary: {\n          total_defects: 30,\n          new_defects: 8,\n          assigned_defects: 10,\n          in_progress_defects: 5,\n          resolved_defects: 12,\n          closed_defects: 5,\n          critical_defects: 3,\n          high_severity_defects: 8\n        }\n      }\n    });\n    \n  } catch (error: any) {\n    console.error('Error in defect dashboard stats route:', error);\n    return res.status(500).json({ \n      message: \"Failed to fetch defect dashboard statistics\",\n      details: error.message || 'Unknown error occurred'\n    });\n  }\n});\n\n// GET /api/defects - Get paginated list of defects with filtering\napp.get('/api/defects', async (req, res) => {\n  try {\n    const { \n      page = '1', \n      limit = '20', \n      status, \n      assigned_to, \n      reported_by,\n      severity,\n      priority,\n      module,\n      sort_by = 'date_reported',\n      sort_order = 'desc'\n    } = req.query;\n    \n    const pageNum = parseInt(page as string, 10);\n    const limitNum = parseInt(limit as string, 10);\n    const offset = (pageNum - 1) * limitNum;\n    \n    // Validate sort parameters\n    const validSortFields = ['date_reported', 'title', 'status', 'severity', 'priority', 'assigned_to'];\n    const validSortOrders = ['asc', 'desc'];\n    \n    const sortField = validSortFields.includes(sort_by as string) ? sort_by : 'date_reported';\n    const sortDirection = validSortOrders.includes(sort_order as string) ? sort_order : 'desc';\n    \n    // Build the main query for paginated defects\n    let defectsQuery = `\n      SELECT \n        d.id,\n        d.defect_id,\n        d.title,\n        d.description,\n        d.status,\n        d.severity,\n        d.priority,\n        d.module,\n        d.environment,\n        d.reported_by,\n        d.date_reported,\n        d.assigned_to,\n        d.linked_test_case_id,\n        d.linked_requirement_id,\n        tc.title as test_case_title,\n        tc.test_case_id,\n        r.title as requirement_title,\n        r.requirement_id\n      FROM defects d\n      LEFT JOIN test_cases tc ON d.linked_test_case_id = tc.id\n      LEFT JOIN requirements r ON d.linked_requirement_id = r.id\n    `;\n    \n    // Build WHERE conditions\n    const conditions = [];\n    const params = [];\n    \n    if (status && typeof status === 'string') {\n      conditions.push('d.status = $' + (params.length + 1));\n      params.push(status);\n    }\n    \n    if (assigned_to && typeof assigned_to === 'string') {\n      conditions.push('d.assigned_to = $' + (params.length + 1));\n      params.push(assigned_to);\n    }\n    \n    if (reported_by && typeof reported_by === 'string') {\n      conditions.push('d.reported_by = $' + (params.length + 1));\n      params.push(reported_by);\n    }\n    \n    if (severity && typeof severity === 'string') {\n      conditions.push('d.severity = $' + (params.length + 1));\n      params.push(severity);\n    }\n    \n    if (priority && typeof priority === 'string') {\n      conditions.push('d.priority = $' + (params.length + 1));\n      params.push(priority);\n    }\n    \n    if (module && typeof module === 'string') {\n      conditions.push('d.module = $' + (params.length + 1));\n      params.push(module);\n    }\n    \n    if (conditions.length > 0) {\n      defectsQuery += ' WHERE ' + conditions.join(' AND ');\n    }\n    \n    defectsQuery += ` ORDER BY d.${sortField} ${sortDirection.toUpperCase()}`;\n    defectsQuery += ` LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;\n    params.push(limitNum, offset);\n    \n    // Count query for pagination\n    let countQuery = 'SELECT COUNT(*) as total FROM defects d';\n    if (conditions.length > 0) {\n      countQuery += ' WHERE ' + conditions.join(' AND ');\n    }\n    \n    // For demonstration, return the SQL queries\n    res.status(200).json({\n      message: \"Paginated defects list query\",\n      pagination: {\n        page: pageNum,\n        limit: limitNum,\n        offset: offset\n      },\n      filters: {\n        status,\n        assigned_to,\n        reported_by,\n        severity,\n        priority,\n        module\n      },\n      sorting: {\n        field: sortField,\n        order: sortDirection\n      },\n      queries: {\n        defects: {\n          sql: defectsQuery,\n          params: params,\n          description: \"Fetches paginated defects with joins to test cases and requirements\"\n        },\n        count: {\n          sql: countQuery,\n          params: params.slice(0, -2), // Remove limit and offset for count\n          description: \"Gets total count for pagination\"\n        }\n      },\n      // Mock data for demonstration\n      mockData: {\n        defects: [\n          {\n            id: \"def-1\",\n            defect_id: \"BUG-1001\",\n            title: \"Login button not working on mobile\",\n            description: \"Users cannot tap the login button on mobile devices\",\n            status: \"assigned\",\n            severity: \"high\",\n            priority: \"high\",\n            module: \"Authentication\",\n            environment: \"production\",\n            reported_by: \"john.doe@company.com\",\n            date_reported: \"2024-01-15T10:30:00Z\",\n            assigned_to: \"jane.smith@company.com\",\n            test_case_title: \"Mobile Login Test\",\n            requirement_title: \"User Authentication System\"\n          },\n          {\n            id: \"def-2\",\n            defect_id: \"BUG-1002\",\n            title: \"Payment processing timeout\",\n            description: \"Payment gateway times out after 30 seconds\",\n            status: \"new\",\n            severity: \"critical\",\n            priority: \"high\",\n            module: \"Payment\",\n            environment: \"production\",\n            reported_by: \"test.user@company.com\",\n            date_reported: \"2024-01-16T14:20:00Z\",\n            assigned_to: null,\n            test_case_title: \"Payment Flow Test\",\n            requirement_title: \"Payment Processing\"\n          }\n        ],\n        pagination: {\n          total: 45,\n          page: pageNum,\n          limit: limitNum,\n          totalPages: Math.ceil(45 / limitNum),\n          hasNext: pageNum * limitNum < 45,\n          hasPrev: pageNum > 1\n        }\n      }\n    });\n    \n  } catch (error: any) {\n    console.error('Error in defects list route:', error);\n    return res.status(500).json({ \n      message: \"Failed to fetch defects list\",\n      details: error.message || 'Unknown error occurred'\n    });\n  }\n});\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":45710},"server/storage.ts":{"content":"import { \n  type TestSuite, \n  type InsertTestSuite,\n  type TestCase,\n  type InsertTestCase,\n  type TestRun,\n  type InsertTestRun,\n  type TestCaseWithSuite,\n  type TestSuiteWithStats,\n  type Requirement,\n  type InsertRequirement,\n  type TestScenario,\n  type InsertTestScenario,\n  type TestExecution,\n  type InsertTestExecution,\n  type Defect,\n  type InsertDefect,\n  testSuites,\n  testCases,\n  testRuns,\n  requirements,\n  testScenarios,\n  testExecutions,\n  defects\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, sql, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Requirements\n  getRequirement(id: string): Promise<Requirement | undefined>;\n  getRequirements(): Promise<Requirement[]>;\n  createRequirement(requirement: InsertRequirement): Promise<Requirement>;\n  updateRequirement(id: string, requirement: Partial<InsertRequirement>): Promise<Requirement | undefined>;\n  deleteRequirement(id: string): Promise<boolean>;\n\n  // Test Scenarios\n  getTestScenario(id: string): Promise<TestScenario | undefined>;\n  getTestScenarios(): Promise<TestScenario[]>;\n  getTestScenariosByRequirement(requirementId: string): Promise<TestScenario[]>;\n  createTestScenario(scenario: InsertTestScenario): Promise<TestScenario>;\n  updateTestScenario(id: string, scenario: Partial<InsertTestScenario>): Promise<TestScenario | undefined>;\n  deleteTestScenario(id: string): Promise<boolean>;\n\n  // Test Suites\n  getTestSuite(id: string): Promise<TestSuite | undefined>;\n  getTestSuites(): Promise<TestSuite[]>;\n  getTestSuitesWithStats(): Promise<TestSuiteWithStats[]>;\n  createTestSuite(suite: InsertTestSuite): Promise<TestSuite>;\n  updateTestSuite(id: string, suite: Partial<InsertTestSuite>): Promise<TestSuite | undefined>;\n  deleteTestSuite(id: string): Promise<boolean>;\n\n  // Test Cases\n  getTestCase(id: string): Promise<TestCase | undefined>;\n  getTestCases(): Promise<TestCase[]>;\n  getTestCasesWithSuite(): Promise<TestCaseWithSuite[]>;\n  getTestCasesBySuite(suiteId: string): Promise<TestCase[]>;\n  getTestCasesByScenario(scenarioId: string): Promise<TestCase[]>;\n  createTestCase(testCase: InsertTestCase): Promise<TestCase>;\n  updateTestCase(id: string, testCase: Partial<InsertTestCase>): Promise<TestCase | undefined>;\n  deleteTestCase(id: string): Promise<boolean>;\n\n  // Test Runs\n  getTestRun(id: string): Promise<TestRun | undefined>;\n  getTestRuns(): Promise<TestRun[]>;\n  getTestRunsByTestCase(testCaseId: string): Promise<TestRun[]>;\n  createTestRun(testRun: InsertTestRun): Promise<TestRun>;\n  updateTestRun(id: string, testRun: Partial<TestRun>): Promise<TestRun | undefined>;\n\n  // Test Executions\n  getTestExecution(id: string): Promise<TestExecution | undefined>;\n  getTestExecutions(): Promise<TestExecution[]>;\n  getTestExecutionsByRun(testRunId: string): Promise<TestExecution[]>;\n  createTestExecution(execution: InsertTestExecution): Promise<TestExecution>;\n  updateTestExecution(id: string, execution: Partial<InsertTestExecution>): Promise<TestExecution | undefined>;\n  deleteTestExecution(id: string): Promise<boolean>;\n\n  // Defects\n  getDefect(id: string): Promise<Defect | undefined>;\n  getDefects(): Promise<Defect[]>;\n  getDefectsByStatus(status: string): Promise<Defect[]>;\n  getDefectsByAssignee(assignedTo: string): Promise<Defect[]>;\n  createDefect(defect: InsertDefect): Promise<Defect>;\n  updateDefect(id: string, defect: Partial<InsertDefect>): Promise<Defect | undefined>;\n  deleteDefect(id: string): Promise<boolean>;\n\n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    runningTests: number;\n    pendingTests: number;\n  }>;\n\n  // Recent Activity\n  getRecentActivity(): Promise<Array<{\n    id: string;\n    type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n    testCaseName: string;\n    suiteName?: string;\n    timestamp: Date;\n    message: string;\n  }>>;\n}\n\nexport class MemStorage implements IStorage {\n  private requirements: Map<string, Requirement>;\n  private testScenarios: Map<string, TestScenario>;\n  private testSuites: Map<string, TestSuite>;\n  private testCases: Map<string, TestCase>;\n  private testRuns: Map<string, TestRun>;\n  private activity: Array<{\n    id: string;\n    type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n    testCaseName: string;\n    suiteName?: string;\n    timestamp: Date;\n    message: string;\n  }>;\n\n  constructor() {\n    this.requirements = new Map();\n    this.testScenarios = new Map();\n    this.testSuites = new Map();\n    this.testCases = new Map();\n    this.testRuns = new Map();\n    this.testExecutions = new Map();\n    this.defects = new Map();\n    this.activity = [];\n\n    // Initialize with some default test suites\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default test suites\n    const authSuite = this.createTestSuiteSync({\n      name: \"Authentication\",\n      description: \"User authentication and authorization tests\",\n      status: \"active\"\n    });\n\n    const integrationSuite = this.createTestSuiteSync({\n      name: \"Integration\",\n      description: \"API and service integration tests\",\n      status: \"active\"\n    });\n\n    const backendSuite = this.createTestSuiteSync({\n      name: \"Backend\",\n      description: \"Backend service and database tests\",\n      status: \"active\"\n    });\n\n    // Create some default test cases\n    this.createTestCaseSync({\n      name: \"User Login Validation\",\n      description: \"Test user login with valid credentials\",\n      suiteId: authSuite.id,\n      priority: \"high\",\n      status: \"passed\"\n    });\n\n    this.createTestCaseSync({\n      name: \"Password Reset Flow\",\n      description: \"Test password reset functionality\",\n      suiteId: authSuite.id,\n      priority: \"medium\",\n      status: \"failed\"\n    });\n\n    this.createTestCaseSync({\n      name: \"Payment Processing\",\n      description: \"Test payment gateway integration\",\n      suiteId: integrationSuite.id,\n      priority: \"high\",\n      status: \"running\"\n    });\n\n    this.createTestCaseSync({\n      name: \"Database Connection\",\n      description: \"Test database connectivity and queries\",\n      suiteId: backendSuite.id,\n      priority: \"medium\",\n      status: \"passed\"\n    });\n  }\n\n  private createTestSuiteSync(suite: InsertTestSuite): TestSuite {\n    const id = randomUUID();\n    const now = new Date();\n    const newSuite: TestSuite = {\n      ...suite,\n      id,\n      description: suite.description || null,\n      status: suite.status || \"active\",\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.testSuites.set(id, newSuite);\n    return newSuite;\n  }\n\n  private createTestCaseSync(testCase: InsertTestCase): TestCase {\n    const id = randomUUID();\n    const now = new Date();\n    const newTestCase: TestCase = {\n      ...testCase,\n      id,\n      name: testCase.name || null,\n      title: testCase.title || null,\n      description: testCase.description || null,\n      suiteId: testCase.suiteId || null,\n      module: testCase.module || null,\n      author: testCase.author || null,\n      testType: testCase.testType || null,\n      priority: testCase.priority || \"medium\",\n      status: testCase.status || \"pending\",\n      lastRun: testCase.status !== 'pending' ? now : null,\n      duration: testCase.status !== 'pending' ? Math.floor(Math.random() * 3000) + 500 : null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.testCases.set(id, newTestCase);\n\n    // Add to activity\n    const suite = testCase.suiteId ? this.testSuites.get(testCase.suiteId) : undefined;\n    this.activity.unshift({\n      id: randomUUID(),\n      type: 'test_created',\n      testCaseName: testCase.name || testCase.title || \"Unnamed Test\",\n      suiteName: suite?.name,\n      timestamp: now,\n      message: `New test case created: \"${testCase.name || testCase.title || \"Unnamed Test\"}\"`\n    });\n\n    return newTestCase;\n  }\n\n  private addActivity(type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started', testCase: TestCase, message: string) {\n    const suite = testCase.suiteId ? this.testSuites.get(testCase.suiteId) : undefined;\n    this.activity.unshift({\n      id: randomUUID(),\n      type,\n      testCaseName: testCase.name || testCase.title || \"Unnamed Test\",\n      suiteName: suite?.name,\n      timestamp: new Date(),\n      message\n    });\n\n    // Keep only last 20 activities\n    if (this.activity.length > 20) {\n      this.activity = this.activity.slice(0, 20);\n    }\n  }\n\n  // Test Suites\n  async getTestSuite(id: string): Promise<TestSuite | undefined> {\n    return this.testSuites.get(id);\n  }\n\n  async getTestSuites(): Promise<TestSuite[]> {\n    return Array.from(this.testSuites.values()).sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getTestSuitesWithStats(): Promise<TestSuiteWithStats[]> {\n    const suites = await this.getTestSuites();\n    return suites.map(suite => {\n      const suiteTests = Array.from(this.testCases.values()).filter(tc => tc.suiteId === suite.id);\n      const totalTests = suiteTests.length;\n      const passedTests = suiteTests.filter(tc => tc.status === 'passed').length;\n      const failedTests = suiteTests.filter(tc => tc.status === 'failed').length;\n      const runningTests = suiteTests.filter(tc => tc.status === 'running').length;\n      const passRate = totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0;\n\n      return {\n        ...suite,\n        totalTests,\n        passedTests,\n        failedTests,\n        runningTests,\n        passRate\n      };\n    });\n  }\n\n  async createTestSuite(suite: InsertTestSuite): Promise<TestSuite> {\n    return this.createTestSuiteSync(suite);\n  }\n\n  async updateTestSuite(id: string, suite: Partial<InsertTestSuite>): Promise<TestSuite | undefined> {\n    const existing = this.testSuites.get(id);\n    if (!existing) return undefined;\n\n    const updated: TestSuite = {\n      ...existing,\n      ...suite,\n      updatedAt: new Date(),\n    };\n    this.testSuites.set(id, updated);\n    return updated;\n  }\n\n  async deleteTestSuite(id: string): Promise<boolean> {\n    return this.testSuites.delete(id);\n  }\n\n  // Test Cases\n  async getTestCase(id: string): Promise<TestCase | undefined> {\n    return this.testCases.get(id);\n  }\n\n  async getTestCases(): Promise<TestCase[]> {\n    return Array.from(this.testCases.values()).sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getTestCasesWithSuite(): Promise<TestCaseWithSuite[]> {\n    const testCases = await this.getTestCases();\n    return testCases.map(testCase => ({\n      ...testCase,\n      suite: testCase.suiteId ? this.testSuites.get(testCase.suiteId) : undefined\n    }));\n  }\n\n  async getTestCasesBySuite(suiteId: string): Promise<TestCase[]> {\n    return Array.from(this.testCases.values())\n      .filter(tc => tc.suiteId === suiteId)\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async createTestCase(testCase: InsertTestCase): Promise<TestCase> {\n    return this.createTestCaseSync(testCase);\n  }\n\n  async updateTestCase(id: string, testCase: Partial<InsertTestCase>): Promise<TestCase | undefined> {\n    const existing = this.testCases.get(id);\n    if (!existing) return undefined;\n\n    const updated: TestCase = {\n      ...existing,\n      ...testCase,\n      updatedAt: new Date(),\n    };\n\n    // Update lastRun if status changed to running, passed, or failed\n    if (testCase.status && ['running', 'passed', 'failed'].includes(testCase.status)) {\n      updated.lastRun = new Date();\n      \n      if (testCase.status === 'passed') {\n        this.addActivity('test_passed', updated, `${updated.name} passed`);\n      } else if (testCase.status === 'failed') {\n        this.addActivity('test_failed', updated, `${updated.name} failed`);\n      } else if (testCase.status === 'running') {\n        this.addActivity('test_started', updated, `${updated.name} running`);\n      }\n    }\n\n    this.testCases.set(id, updated);\n    return updated;\n  }\n\n  async deleteTestCase(id: string): Promise<boolean> {\n    return this.testCases.delete(id);\n  }\n\n  // Test Runs\n  async getTestRun(id: string): Promise<TestRun | undefined> {\n    return this.testRuns.get(id);\n  }\n\n  async getTestRuns(): Promise<TestRun[]> {\n    return Array.from(this.testRuns.values()).sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getTestRunsByTestCase(testCaseId: string): Promise<TestRun[]> {\n    return Array.from(this.testRuns.values())\n      .filter(tr => tr.testCaseId === testCaseId)\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async createTestRun(testRun: InsertTestRun): Promise<TestRun> {\n    const id = randomUUID();\n    const now = new Date();\n    const newTestRun: TestRun = {\n      ...testRun,\n      id,\n      testCaseId: testRun.testCaseId || null,\n      startTime: testRun.startTime || now,\n      endTime: null,\n      duration: null,\n      errorMessage: testRun.errorMessage || null,\n      createdAt: now,\n    };\n    this.testRuns.set(id, newTestRun);\n    return newTestRun;\n  }\n\n  async updateTestRun(id: string, testRun: Partial<TestRun>): Promise<TestRun | undefined> {\n    const existing = this.testRuns.get(id);\n    if (!existing) return undefined;\n\n    const updated: TestRun = {\n      ...existing,\n      ...testRun,\n    };\n\n    // Calculate duration if endTime is provided\n    if (testRun.endTime && existing.startTime) {\n      updated.duration = testRun.endTime.getTime() - existing.startTime.getTime();\n    }\n\n    this.testRuns.set(id, updated);\n    return updated;\n  }\n\n  // Dashboard Stats\n  async getDashboardStats(): Promise<{\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    runningTests: number;\n    pendingTests: number;\n  }> {\n    const testCases = Array.from(this.testCases.values());\n    return {\n      totalTests: testCases.length,\n      passedTests: testCases.filter(tc => tc.status === 'passed').length,\n      failedTests: testCases.filter(tc => tc.status === 'failed').length,\n      runningTests: testCases.filter(tc => tc.status === 'running').length,\n      pendingTests: testCases.filter(tc => tc.status === 'pending').length,\n    };\n  }\n\n  // Requirements (stub implementations)\n  async getRequirement(id: string): Promise<Requirement | undefined> {\n    return this.requirements.get(id);\n  }\n\n  async getRequirements(): Promise<Requirement[]> {\n    return Array.from(this.requirements.values()).sort((a, b) => b.dateCreated.getTime() - a.dateCreated.getTime());\n  }\n\n  async createRequirement(requirement: InsertRequirement): Promise<Requirement> {\n    const id = randomUUID();\n    const now = new Date();\n    const newRequirement: Requirement = {\n      ...requirement,\n      id,\n      requirementId: requirement.requirementId || null,\n      description: requirement.description || null,\n      module: requirement.module || null,\n      priority: requirement.priority || \"medium\",\n      dateCreated: now\n    };\n    this.requirements.set(id, newRequirement);\n    return newRequirement;\n  }\n\n  async updateRequirement(id: string, requirement: Partial<InsertRequirement>): Promise<Requirement | undefined> {\n    const existing = this.requirements.get(id);\n    if (!existing) return undefined;\n\n    const updated: Requirement = {\n      ...existing,\n      ...requirement\n    };\n    this.requirements.set(id, updated);\n    return updated;\n  }\n\n  async deleteRequirement(id: string): Promise<boolean> {\n    return this.requirements.delete(id);\n  }\n\n  // Test Scenarios (stub implementations)\n  async getTestScenario(id: string): Promise<TestScenario | undefined> {\n    return this.testScenarios.get(id);\n  }\n\n  async getTestScenarios(): Promise<TestScenario[]> {\n    return Array.from(this.testScenarios.values());\n  }\n\n  async getTestScenariosByRequirement(requirementId: string): Promise<TestScenario[]> {\n    return Array.from(this.testScenarios.values())\n      .filter(scenario => scenario.linkedRequirementId === requirementId);\n  }\n\n  async createTestScenario(scenario: InsertTestScenario): Promise<TestScenario> {\n    const id = randomUUID();\n    const newScenario: TestScenario = {\n      ...scenario,\n      id,\n      description: scenario.description || null,\n      module: scenario.module || null,\n      testType: scenario.testType || null,\n      priority: scenario.priority || \"medium\",\n      reviewer: scenario.reviewer || null,\n      status: scenario.status || \"draft\"\n    };\n    this.testScenarios.set(id, newScenario);\n    return newScenario;\n  }\n\n  async updateTestScenario(id: string, scenario: Partial<InsertTestScenario>): Promise<TestScenario | undefined> {\n    const existing = this.testScenarios.get(id);\n    if (!existing) return undefined;\n\n    const updated: TestScenario = {\n      ...existing,\n      ...scenario\n    };\n    this.testScenarios.set(id, updated);\n    return updated;\n  }\n\n  async deleteTestScenario(id: string): Promise<boolean> {\n    return this.testScenarios.delete(id);\n  }\n\n  // Test Cases by Scenario\n  async getTestCasesByScenario(scenarioId: string): Promise<TestCase[]> {\n    return Array.from(this.testCases.values())\n      .filter(tc => tc.linkedScenarioId === scenarioId)\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  // Test Executions\n  async getTestExecution(id: string): Promise<TestExecution | undefined> {\n    return this.testExecutions.get(id);\n  }\n\n  async getTestExecutions(): Promise<TestExecution[]> {\n    return Array.from(this.testExecutions.values());\n  }\n\n  async getTestExecutionsByRun(testRunId: string): Promise<TestExecution[]> {\n    return Array.from(this.testExecutions.values())\n      .filter(execution => execution.testRunId === testRunId);\n  }\n\n  async createTestExecution(execution: InsertTestExecution): Promise<TestExecution> {\n    const id = randomUUID();\n    const newExecution: TestExecution = {\n      ...execution,\n      id,\n      actualResult: execution.actualResult || null,\n      executionStatus: execution.executionStatus || \"not_executed\",\n      executedAt: execution.executedAt || null,\n      evidenceUrl: execution.evidenceUrl || null\n    };\n    this.testExecutions.set(id, newExecution);\n    return newExecution;\n  }\n\n  async updateTestExecution(id: string, execution: Partial<InsertTestExecution>): Promise<TestExecution | undefined> {\n    const existing = this.testExecutions.get(id);\n    if (!existing) return undefined;\n\n    const updated: TestExecution = {\n      ...existing,\n      ...execution\n    };\n    this.testExecutions.set(id, updated);\n    return updated;\n  }\n\n  async deleteTestExecution(id: string): Promise<boolean> {\n    return this.testExecutions.delete(id);\n  }\n\n  // Defects\n  async getDefect(id: string): Promise<Defect | undefined> {\n    return this.defects.get(id);\n  }\n\n  async getDefects(): Promise<Defect[]> {\n    return Array.from(this.defects.values())\n      .sort((a, b) => b.dateReported.getTime() - a.dateReported.getTime());\n  }\n\n  async getDefectsByStatus(status: string): Promise<Defect[]> {\n    return Array.from(this.defects.values())\n      .filter(defect => defect.status === status)\n      .sort((a, b) => b.dateReported.getTime() - a.dateReported.getTime());\n  }\n\n  async getDefectsByAssignee(assignedTo: string): Promise<Defect[]> {\n    return Array.from(this.defects.values())\n      .filter(defect => defect.assignedTo === assignedTo)\n      .sort((a, b) => b.dateReported.getTime() - a.dateReported.getTime());\n  }\n\n  async createDefect(defect: InsertDefect): Promise<Defect> {\n    const id = randomUUID();\n    const now = new Date();\n    const newDefect: Defect = {\n      ...defect,\n      id,\n      defectId: defect.defectId || null,\n      description: defect.description || null,\n      stepsToReproduce: defect.stepsToReproduce || null,\n      expectedResult: defect.expectedResult || null,\n      actualResult: defect.actualResult || null,\n      severity: defect.severity || \"medium\",\n      priority: defect.priority || \"medium\",\n      status: defect.status || \"new\",\n      module: defect.module || null,\n      environment: defect.environment || null,\n      assignedTo: defect.assignedTo || null,\n      linkedTestCaseId: defect.linkedTestCaseId || null,\n      linkedRequirementId: defect.linkedRequirementId || null,\n      foundInVersion: defect.foundInVersion || null,\n      fixedInVersion: defect.fixedInVersion || null,\n      resolutionType: defect.resolutionType || null,\n      dateReported: now\n    };\n    this.defects.set(id, newDefect);\n    return newDefect;\n  }\n\n  async updateDefect(id: string, defect: Partial<InsertDefect>): Promise<Defect | undefined> {\n    const existing = this.defects.get(id);\n    if (!existing) return undefined;\n\n    const updated: Defect = {\n      ...existing,\n      ...defect\n    };\n    this.defects.set(id, updated);\n    return updated;\n  }\n\n  async deleteDefect(id: string): Promise<boolean> {\n    return this.defects.delete(id);\n  }\n\n  // Recent Activity\n  async getRecentActivity(): Promise<Array<{\n    id: string;\n    type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n    testCaseName: string;\n    suiteName?: string;\n    timestamp: Date;\n    message: string;\n  }>> {\n    return [...this.activity];\n  }\n}\n\n// Database Storage Implementation\nexport class DbStorage implements IStorage {\n  private db;\n\n  constructor() {\n    const connectionString = process.env.DATABASE_URL;\n    if (!connectionString) {\n      throw new Error('DATABASE_URL environment variable is required');\n    }\n    \n    const sql = neon(connectionString);\n    this.db = drizzle(sql);\n    \n    // Initialize with sample data if empty\n    this.initializeIfEmpty();\n  }\n\n  private async initializeIfEmpty() {\n    try {\n      const existingSuites = await this.db.select().from(testSuites).limit(1);\n      if (existingSuites.length === 0) {\n        await this.seedInitialData();\n      }\n    } catch (error) {\n      console.error('Failed to check or initialize database:', error);\n    }\n  }\n\n  private async seedInitialData() {\n    // Create default test suites\n    const authSuite = await this.db.insert(testSuites).values({\n      name: \"Authentication\",\n      description: \"User authentication and authorization tests\",\n      status: \"active\"\n    }).returning().then(rows => rows[0]);\n\n    const integrationSuite = await this.db.insert(testSuites).values({\n      name: \"Integration\", \n      description: \"API and service integration tests\",\n      status: \"active\"\n    }).returning().then(rows => rows[0]);\n\n    const backendSuite = await this.db.insert(testSuites).values({\n      name: \"Backend\",\n      description: \"Backend service and database tests\", \n      status: \"active\"\n    }).returning().then(rows => rows[0]);\n\n    // Create some default test cases\n    await this.db.insert(testCases).values([\n      {\n        name: \"User Login Validation\",\n        description: \"Test user login with valid credentials\",\n        suiteId: authSuite.id,\n        priority: \"high\",\n        status: \"passed\",\n        lastRun: new Date(),\n        duration: 1200\n      },\n      {\n        name: \"Password Reset Flow\", \n        description: \"Test password reset functionality\",\n        suiteId: authSuite.id,\n        priority: \"medium\",\n        status: \"failed\",\n        lastRun: new Date(),\n        duration: 850\n      },\n      {\n        name: \"Payment Processing\",\n        description: \"Test payment gateway integration\", \n        suiteId: integrationSuite.id,\n        priority: \"high\",\n        status: \"running\",\n        lastRun: new Date()\n      },\n      {\n        name: \"Database Connection\",\n        description: \"Test database connectivity and queries\",\n        suiteId: backendSuite.id,\n        priority: \"medium\", \n        status: \"passed\",\n        lastRun: new Date(),\n        duration: 650\n      }\n    ]);\n  }\n\n  // Test Suites\n  async getTestSuite(id: string): Promise<TestSuite | undefined> {\n    const result = await this.db.select().from(testSuites).where(eq(testSuites.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getTestSuites(): Promise<TestSuite[]> {\n    return await this.db.select().from(testSuites).orderBy(desc(testSuites.createdAt));\n  }\n\n  async getTestSuitesWithStats(): Promise<TestSuiteWithStats[]> {\n    const suites = await this.getTestSuites();\n    const result: TestSuiteWithStats[] = [];\n\n    for (const suite of suites) {\n      const suiteTests = await this.db.select().from(testCases).where(eq(testCases.suiteId, suite.id));\n      const totalTests = suiteTests.length;\n      const passedTests = suiteTests.filter(tc => tc.status === 'passed').length;\n      const failedTests = suiteTests.filter(tc => tc.status === 'failed').length;\n      const runningTests = suiteTests.filter(tc => tc.status === 'running').length;\n      const passRate = totalTests > 0 ? Math.round((passedTests / totalTests) * 100) : 0;\n\n      result.push({\n        ...suite,\n        totalTests,\n        passedTests,\n        failedTests,\n        runningTests,\n        passRate\n      });\n    }\n\n    return result;\n  }\n\n  async createTestSuite(suite: InsertTestSuite): Promise<TestSuite> {\n    const result = await this.db.insert(testSuites).values({\n      ...suite,\n      description: suite.description || null,\n      status: suite.status || \"active\"\n    }).returning();\n    return result[0];\n  }\n\n  async updateTestSuite(id: string, suite: Partial<InsertTestSuite>): Promise<TestSuite | undefined> {\n    const result = await this.db.update(testSuites)\n      .set({\n        ...suite,\n        updatedAt: new Date()\n      })\n      .where(eq(testSuites.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTestSuite(id: string): Promise<boolean> {\n    const result = await this.db.delete(testSuites).where(eq(testSuites.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Test Cases\n  async getTestCase(id: string): Promise<TestCase | undefined> {\n    const result = await this.db.select().from(testCases).where(eq(testCases.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getTestCases(): Promise<TestCase[]> {\n    return await this.db.select().from(testCases).orderBy(desc(testCases.createdAt));\n  }\n\n  async getTestCasesWithSuite(): Promise<TestCaseWithSuite[]> {\n    const result = await this.db\n      .select({\n        id: testCases.id,\n        name: testCases.name,\n        description: testCases.description,\n        suiteId: testCases.suiteId,\n        priority: testCases.priority,\n        status: testCases.status,\n        lastRun: testCases.lastRun,\n        duration: testCases.duration,\n        createdAt: testCases.createdAt,\n        updatedAt: testCases.updatedAt,\n        suite: {\n          name: testSuites.name\n        }\n      })\n      .from(testCases)\n      .leftJoin(testSuites, eq(testCases.suiteId, testSuites.id))\n      .orderBy(desc(testCases.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      suite: row.suite?.name ? { name: row.suite.name } : undefined\n    }));\n  }\n\n  async getTestCasesBySuite(suiteId: string): Promise<TestCase[]> {\n    return await this.db.select().from(testCases)\n      .where(eq(testCases.suiteId, suiteId))\n      .orderBy(desc(testCases.createdAt));\n  }\n\n  async createTestCase(testCase: InsertTestCase): Promise<TestCase> {\n    const result = await this.db.insert(testCases).values({\n      ...testCase,\n      description: testCase.description || null,\n      suiteId: testCase.suiteId || null,\n      priority: testCase.priority || \"medium\",\n      status: testCase.status || \"pending\"\n    }).returning();\n    return result[0];\n  }\n\n  async updateTestCase(id: string, testCase: Partial<InsertTestCase>): Promise<TestCase | undefined> {\n    const updateData: any = {\n      ...testCase,\n      updatedAt: new Date()\n    };\n\n    // Update lastRun if status changed to running, passed, or failed\n    if (testCase.status && ['running', 'passed', 'failed'].includes(testCase.status)) {\n      updateData.lastRun = new Date();\n    }\n\n    const result = await this.db.update(testCases)\n      .set(updateData)\n      .where(eq(testCases.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTestCase(id: string): Promise<boolean> {\n    const result = await this.db.delete(testCases).where(eq(testCases.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Test Runs\n  async getTestRun(id: string): Promise<TestRun | undefined> {\n    const result = await this.db.select().from(testRuns).where(eq(testRuns.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getTestRuns(): Promise<TestRun[]> {\n    return await this.db.select().from(testRuns).orderBy(desc(testRuns.createdAt));\n  }\n\n  async getTestRunsByTestCase(testCaseId: string): Promise<TestRun[]> {\n    return await this.db.select().from(testRuns)\n      .where(eq(testRuns.testCaseId, testCaseId))\n      .orderBy(desc(testRuns.createdAt));\n  }\n\n  async createTestRun(testRun: InsertTestRun): Promise<TestRun> {\n    const result = await this.db.insert(testRuns).values({\n      ...testRun,\n      testCaseId: testRun.testCaseId || null,\n      startTime: testRun.startTime || new Date(),\n      errorMessage: testRun.errorMessage || null\n    }).returning();\n    return result[0];\n  }\n\n  async updateTestRun(id: string, testRun: Partial<TestRun>): Promise<TestRun | undefined> {\n    const updateData: any = { ...testRun };\n\n    // Calculate duration if endTime is provided\n    if (testRun.endTime) {\n      const existing = await this.getTestRun(id);\n      if (existing?.startTime) {\n        updateData.duration = testRun.endTime.getTime() - existing.startTime.getTime();\n      }\n    }\n\n    const result = await this.db.update(testRuns)\n      .set(updateData)\n      .where(eq(testRuns.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Requirements\n  async getRequirement(id: string): Promise<Requirement | undefined> {\n    const result = await this.db.select().from(requirements).where(eq(requirements.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getRequirements(): Promise<Requirement[]> {\n    return await this.db.select().from(requirements).orderBy(desc(requirements.dateCreated));\n  }\n\n  async createRequirement(requirement: InsertRequirement): Promise<Requirement> {\n    const result = await this.db.insert(requirements).values({\n      ...requirement,\n      description: requirement.description || null,\n      module: requirement.module || null,\n      priority: requirement.priority || \"medium\"\n    }).returning();\n    return result[0];\n  }\n\n  async updateRequirement(id: string, requirement: Partial<InsertRequirement>): Promise<Requirement | undefined> {\n    const result = await this.db.update(requirements)\n      .set(requirement)\n      .where(eq(requirements.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteRequirement(id: string): Promise<boolean> {\n    const result = await this.db.delete(requirements).where(eq(requirements.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Test Scenarios\n  async getTestScenario(id: string): Promise<TestScenario | undefined> {\n    const result = await this.db.select().from(testScenarios).where(eq(testScenarios.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getTestScenarios(): Promise<TestScenario[]> {\n    return await this.db.select().from(testScenarios).orderBy(desc(testScenarios.id));\n  }\n\n  async getTestScenariosByRequirement(requirementId: string): Promise<TestScenario[]> {\n    return await this.db.select().from(testScenarios)\n      .where(eq(testScenarios.linkedRequirementId, requirementId));\n  }\n\n  async createTestScenario(scenario: InsertTestScenario): Promise<TestScenario> {\n    const result = await this.db.insert(testScenarios).values({\n      ...scenario,\n      description: scenario.description || null,\n      module: scenario.module || null,\n      testType: scenario.testType || null,\n      priority: scenario.priority || \"medium\",\n      reviewer: scenario.reviewer || null,\n      status: scenario.status || \"draft\"\n    }).returning();\n    return result[0];\n  }\n\n  async updateTestScenario(id: string, scenario: Partial<InsertTestScenario>): Promise<TestScenario | undefined> {\n    const result = await this.db.update(testScenarios)\n      .set(scenario)\n      .where(eq(testScenarios.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTestScenario(id: string): Promise<boolean> {\n    const result = await this.db.delete(testScenarios).where(eq(testScenarios.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Dashboard Stats\n  async getDashboardStats(): Promise<{\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    runningTests: number;\n    pendingTests: number;\n  }> {\n    const allTests = await this.db.select().from(testCases);\n    return {\n      totalTests: allTests.length,\n      passedTests: allTests.filter(tc => tc.status === 'passed').length,\n      failedTests: allTests.filter(tc => tc.status === 'failed').length,\n      runningTests: allTests.filter(tc => tc.status === 'running').length,\n      pendingTests: allTests.filter(tc => tc.status === 'pending').length,\n    };\n  }\n\n  // Recent Activity - derived from test runs\n  async getRecentActivity(): Promise<Array<{\n    id: string;\n    type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n    testCaseName: string;\n    suiteName?: string;\n    timestamp: Date;\n    message: string;\n  }>> {\n    const recentRuns = await this.db\n      .select({\n        id: testRuns.id,\n        status: testRuns.status,\n        startTime: testRuns.startTime,\n        endTime: testRuns.endTime,\n        testCase: {\n          name: testCases.name,\n          id: testCases.id\n        },\n        suite: {\n          name: testSuites.name\n        }\n      })\n      .from(testRuns)\n      .leftJoin(testCases, eq(testRuns.testCaseId, testCases.id))\n      .leftJoin(testSuites, eq(testCases.suiteId, testSuites.id))\n      .orderBy(desc(testRuns.startTime))\n      .limit(20);\n\n    return recentRuns\n      .filter(run => run.testCase?.name) // Only include runs with valid test case names\n      .map(run => {\n        let type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n        let message: string;\n        let timestamp: Date;\n\n        if (run.status === 'passed') {\n          type = 'test_passed';\n          message = `${run.testCase!.name} passed`;\n          timestamp = run.endTime || run.startTime || new Date();\n        } else if (run.status === 'failed') {\n          type = 'test_failed'; \n          message = `${run.testCase!.name} failed`;\n          timestamp = run.endTime || run.startTime || new Date();\n        } else if (run.status === 'running') {\n          type = 'test_started';\n          message = `${run.testCase!.name} running`;\n          timestamp = run.startTime || new Date();\n        } else {\n          type = 'test_started';\n          message = `${run.testCase!.name} started`;\n          timestamp = run.startTime || new Date();\n        }\n\n        return {\n          id: run.id,\n          type,\n          testCaseName: run.testCase!.name,\n          suiteName: run.suite?.name,\n          timestamp,\n          message\n        };\n      });\n  }\n}\n\n// Use database storage if DATABASE_URL is available, otherwise fallback to memory\nexport const storage = process.env.DATABASE_URL ? new DbStorage() : new MemStorage();\n","size_bytes":35225},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Requirements Table\nexport const requirements = pgTable(\"requirements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requirementId: varchar(\"requirement_id\", { length: 50 }), // e.g., 'REQ-1' - nullable for migration\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  module: text(\"module\"),\n  priority: text(\"priority\").notNull().default(\"medium\"), // high, medium, low\n  author: text(\"author\").notNull(),\n  dateCreated: timestamp(\"date_created\").defaultNow().notNull(),\n}, (table) => ({\n  requirementIdIdx: index(\"requirements_requirement_id_idx\").on(table.requirementId),\n  moduleIdx: index(\"requirements_module_idx\").on(table.module),\n  priorityIdx: index(\"requirements_priority_idx\").on(table.priority),\n}));\n\n// Test Scenarios Table\nexport const testScenarios = pgTable(\"test_scenarios\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scenarioId: varchar(\"scenario_id\", { length: 50 }), // e.g., 'SC_LOGIN_01' - nullable for migration\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  linkedRequirementId: varchar(\"linked_requirement_id\").references(() => requirements.id),\n  module: text(\"module\"),\n  testType: text(\"test_type\"), // functional, integration, regression, etc.\n  priority: text(\"priority\").notNull().default(\"medium\"), // high, medium, low\n  author: text(\"author\").notNull(),\n  reviewer: text(\"reviewer\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, reviewed, approved, deprecated\n}, (table) => ({\n  scenarioIdIdx: index(\"test_scenarios_scenario_id_idx\").on(table.scenarioId),\n  linkedRequirementIdx: index(\"test_scenarios_linked_requirement_idx\").on(table.linkedRequirementId),\n  moduleIdx: index(\"test_scenarios_module_idx\").on(table.module),\n  statusIdx: index(\"test_scenarios_status_idx\").on(table.status),\n}));\n\n// Test Cases Table (Updated with new comprehensive fields)\nexport const testCases = pgTable(\"test_cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testCaseId: varchar(\"test_case_id\", { length: 50 }), // e.g., 'TC_LOGIN_01' - nullable for migration\n  title: text(\"title\"), // nullable for migration compatibility\n  linkedScenarioId: varchar(\"linked_scenario_id\").references(() => testScenarios.id),\n  preconditions: text(\"preconditions\"),\n  testSteps: jsonb(\"test_steps\"), // Array of step objects\n  testData: text(\"test_data\"),\n  expectedResult: text(\"expected_result\"),\n  actualResult: text(\"actual_result\"), // To be filled during execution\n  executionStatus: text(\"execution_status\").notNull().default(\"not_executed\"), // pass, fail, blocked, not_executed\n  priority: text(\"priority\").notNull().default(\"medium\"), // high, medium, low\n  module: text(\"module\"),\n  testType: text(\"test_type\"), // positive, negative, boundary_value, smoke\n  postConditions: text(\"post_conditions\"), // State of system after test runs\n  author: text(\"author\"), // nullable for migration compatibility\n  dateCreated: timestamp(\"date_created\").defaultNow(),\n  automationStatus: text(\"automation_status\").notNull().default(\"manual\"), // manual, automated, to_be_automated\n  automationScriptId: text(\"automation_script_id\"), // Link to automated test script\n  comments: text(\"comments\"), // Additional notes\n  // Legacy fields for backward compatibility\n  name: text(\"name\"),\n  description: text(\"description\"),\n  suiteId: varchar(\"suite_id\").references(() => testSuites.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, running, passed, failed\n  lastRun: timestamp(\"last_run\"),\n  duration: integer(\"duration\"), // in milliseconds\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  testCaseIdIdx: index(\"test_cases_test_case_id_idx\").on(table.testCaseId),\n  linkedScenarioIdx: index(\"test_cases_linked_scenario_idx\").on(table.linkedScenarioId),\n  moduleIdx: index(\"test_cases_module_idx\").on(table.module),\n  priorityIdx: index(\"test_cases_priority_idx\").on(table.priority),\n  automationStatusIdx: index(\"test_cases_automation_status_idx\").on(table.automationStatus),\n  executionStatusIdx: index(\"test_cases_execution_status_idx\").on(table.executionStatus),\n}));\n\n// Test Suites Table (Preserved for backward compatibility)\nexport const testSuites = pgTable(\"test_suites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, archived\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Test Runs Table (Updated with new comprehensive fields)\nexport const testRuns = pgTable(\"test_runs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\"), // nullable for migration compatibility\n  environment: text(\"environment\"), // dev, staging, production, etc. - nullable for migration\n  buildVersion: text(\"build_version\"),\n  status: text(\"status\").notNull().default(\"planned\"), // planned, in_progress, completed, aborted\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  // Legacy fields for backward compatibility\n  testCaseId: varchar(\"test_case_id\").references(() => testCases.id),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\"), // in milliseconds\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  environmentIdx: index(\"test_runs_environment_idx\").on(table.environment),\n  statusIdx: index(\"test_runs_status_idx\").on(table.status),\n  startedAtIdx: index(\"test_runs_started_at_idx\").on(table.startedAt),\n}));\n\n// Test Executions Table\nexport const testExecutions = pgTable(\"test_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  testRunId: varchar(\"test_run_id\").references(() => testRuns.id).notNull(),\n  testCaseId: varchar(\"test_case_id\").references(() => testCases.id).notNull(),\n  assignedTo: text(\"assigned_to\"),\n  actualResult: text(\"actual_result\"),\n  executionStatus: text(\"execution_status\").notNull().default(\"not_executed\"), // pass, fail, blocked, not_executed, skip\n  executedAt: timestamp(\"executed_at\"),\n  evidenceUrl: text(\"evidence_url\"), // for screenshots, videos, etc.\n}, (table) => ({\n  testRunIdIdx: index(\"test_executions_test_run_id_idx\").on(table.testRunId),\n  testCaseIdIdx: index(\"test_executions_test_case_id_idx\").on(table.testCaseId),\n  executionStatusIdx: index(\"test_executions_execution_status_idx\").on(table.executionStatus),\n  executedAtIdx: index(\"test_executions_executed_at_idx\").on(table.executedAt),\n}));\n\n// Defects Table\nexport const defects = pgTable(\"defects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  defectId: varchar(\"defect_id\", { length: 50 }), // e.g., 'BUG-1001' - nullable for migration\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  stepsToReproduce: text(\"steps_to_reproduce\"),\n  expectedResult: text(\"expected_result\"),\n  actualResult: text(\"actual_result\"),\n  severity: text(\"severity\").notNull().default(\"medium\"), // critical, high, medium, low\n  priority: text(\"priority\").notNull().default(\"medium\"), // high, medium, low\n  status: text(\"status\").notNull().default(\"new\"), // new, assigned, in_progress, resolved, closed, reopened\n  module: text(\"module\"),\n  environment: text(\"environment\"),\n  reportedBy: text(\"reported_by\").notNull(),\n  dateReported: timestamp(\"date_reported\").defaultNow().notNull(),\n  assignedTo: text(\"assigned_to\"),\n  linkedTestCaseId: varchar(\"linked_test_case_id\").references(() => testCases.id),\n  linkedRequirementId: varchar(\"linked_requirement_id\").references(() => requirements.id),\n  foundInVersion: text(\"found_in_version\"),\n  fixedInVersion: text(\"fixed_in_version\"),\n  resolutionType: text(\"resolution_type\"), // fixed, duplicate, not_a_bug, wont_fix, cannot_reproduce\n}, (table) => ({\n  defectIdIdx: index(\"defects_defect_id_idx\").on(table.defectId),\n  severityIdx: index(\"defects_severity_idx\").on(table.severity),\n  statusIdx: index(\"defects_status_idx\").on(table.status),\n  moduleIdx: index(\"defects_module_idx\").on(table.module),\n  reportedByIdx: index(\"defects_reported_by_idx\").on(table.reportedBy),\n  assignedToIdx: index(\"defects_assigned_to_idx\").on(table.assignedTo),\n  linkedTestCaseIdx: index(\"defects_linked_test_case_idx\").on(table.linkedTestCaseId),\n  linkedRequirementIdx: index(\"defects_linked_requirement_idx\").on(table.linkedRequirementId),\n}));\n\n// Insert schemas\nexport const insertRequirementSchema = createInsertSchema(requirements).omit({\n  id: true,\n  dateCreated: true,\n});\n\nexport const insertTestScenarioSchema = createInsertSchema(testScenarios).omit({\n  id: true,\n});\n\nexport const insertTestCaseSchema = createInsertSchema(testCases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastRun: true,\n  duration: true,\n  dateCreated: true,\n});\n\nexport const insertTestSuiteSchema = createInsertSchema(testSuites).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestRunSchema = createInsertSchema(testRuns).omit({\n  id: true,\n  createdAt: true,\n  endTime: true,\n  duration: true,\n});\n\nexport const insertTestExecutionSchema = createInsertSchema(testExecutions).omit({\n  id: true,\n});\n\nexport const insertDefectSchema = createInsertSchema(defects).omit({\n  id: true,\n  dateReported: true,\n});\n\n// Types\nexport type Requirement = typeof requirements.$inferSelect;\nexport type InsertRequirement = z.infer<typeof insertRequirementSchema>;\n\nexport type TestScenario = typeof testScenarios.$inferSelect;\nexport type InsertTestScenario = z.infer<typeof insertTestScenarioSchema>;\n\nexport type TestCase = typeof testCases.$inferSelect;\nexport type InsertTestCase = z.infer<typeof insertTestCaseSchema>;\n\nexport type TestSuite = typeof testSuites.$inferSelect;\nexport type InsertTestSuite = z.infer<typeof insertTestSuiteSchema>;\n\nexport type TestRun = typeof testRuns.$inferSelect;\nexport type InsertTestRun = z.infer<typeof insertTestRunSchema>;\n\nexport type TestExecution = typeof testExecutions.$inferSelect;\nexport type InsertTestExecution = z.infer<typeof insertTestExecutionSchema>;\n\nexport type Defect = typeof defects.$inferSelect;\nexport type InsertDefect = z.infer<typeof insertDefectSchema>;\n\n// Extended types for UI\nexport type TestCaseWithScenario = TestCase & {\n  scenario?: Pick<TestScenario, \"title\" | \"scenarioId\">;\n};\n\nexport type TestCaseWithSuite = TestCase & {\n  suite?: Pick<TestSuite, \"name\">;\n};\n\nexport type TestScenarioWithRequirement = TestScenario & {\n  requirement?: Pick<Requirement, \"title\" | \"requirementId\">;\n};\n\nexport type TestExecutionWithDetails = TestExecution & {\n  testCase?: Pick<TestCase, \"title\" | \"testCaseId\">;\n  testRun?: Pick<TestRun, \"name\" | \"environment\">;\n};\n\nexport type DefectWithLinks = Defect & {\n  testCase?: Pick<TestCase, \"title\" | \"testCaseId\">;\n  requirement?: Pick<Requirement, \"title\" | \"requirementId\">;\n};\n\nexport type TestRunWithStats = TestRun & {\n  totalExecutions: number;\n  passedExecutions: number;\n  failedExecutions: number;\n  blockedExecutions: number;\n  notExecutedCount: number;\n  passRate: number;\n};\n\nexport type TestSuiteWithStats = TestSuite & {\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  runningTests: number;\n  passRate: number;\n};","size_bytes":11655},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"./pages/not-found\";\nimport Dashboard from \"./pages/dashboard\";\nimport Requirements from \"./pages/requirements\";\nimport TestScenarios from \"./pages/test-scenarios\";\nimport TestCases from \"./pages/test-cases\";\nimport TestSuites from \"./pages/test-suites\";\nimport TestRuns from \"./pages/test-runs\";\nimport Reports from \"./pages/reports\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/requirements\" component={Requirements} />\n      <Route path=\"/test-scenarios\" component={TestScenarios} />\n      <Route path=\"/test-cases\" component={TestCases} />\n      <Route path=\"/test-suites\" component={TestSuites} />\n      <Route path=\"/test-runs\" component={TestRuns} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1336},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 23%, 97%);\n  --foreground: hsl(220, 9%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 9%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 9%, 9%);\n  --primary: hsl(220, 91%, 56%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14%, 96%);\n  --secondary-foreground: hsl(220, 9%, 46%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(220, 14%, 95%);\n  --accent-foreground: hsl(220, 9%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(220, 91%, 56%);\n  --chart-1: hsl(220, 91%, 56%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(220, 9%, 9%);\n  --sidebar-primary: hsl(220, 91%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 14%, 95%);\n  --sidebar-accent-foreground: hsl(220, 91%, 56%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(220, 91%, 56%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00), 0px 1px 2px -1px hsl(220, 91%, 56% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00), 0px 1px 2px -1px hsl(220, 91%, 56% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00), 0px 2px 4px -1px hsl(220, 91%, 56% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00), 0px 4px 6px -1px hsl(220, 91%, 56% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00), 0px 8px 10px -1px hsl(220, 91%, 56% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220, 91%, 56% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(220, 27%, 8%);\n  --foreground: hsl(220, 9%, 91%);\n  --card: hsl(220, 27%, 12%);\n  --card-foreground: hsl(220, 9%, 91%);\n  --popover: hsl(220, 27%, 12%);\n  --popover-foreground: hsl(220, 9%, 91%);\n  --primary: hsl(220, 91%, 56%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 17%, 17%);\n  --secondary-foreground: hsl(220, 9%, 76%);\n  --muted: hsl(220, 17%, 17%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(220, 17%, 20%);\n  --accent-foreground: hsl(220, 9%, 85%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 17%, 20%);\n  --input: hsl(220, 17%, 20%);\n  --ring: hsl(220, 91%, 56%);\n  --chart-1: hsl(220, 91%, 56%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(220, 27%, 12%);\n  --sidebar-foreground: hsl(220, 9%, 91%);\n  --sidebar-primary: hsl(220, 91%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 17%, 20%);\n  --sidebar-accent-foreground: hsl(220, 91%, 56%);\n  --sidebar-border: hsl(220, 17%, 20%);\n  --sidebar-ring: hsl(220, 91%, 56%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3772},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/dashboard-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { FileText, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface DashboardStats {\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  runningTests: number;\n  pendingTests: number;\n}\n\nexport default function DashboardStats() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n              <div className=\"mt-4 flex items-center space-x-2\">\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-24\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-muted-foreground\">\n              Failed to load statistics\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const successRate = stats.totalTests > 0 ? Math.round((stats.passedTests / stats.totalTests) * 100) : 0;\n  const activeRate = stats.totalTests > 0 ? ((stats.runningTests / stats.totalTests) * 100).toFixed(1) : \"0\";\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Total Test Cases</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-tests\">\n                {stats.totalTests}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <FileText className=\"w-6 h-6 text-primary\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">+12%</span>\n            <span className=\"text-muted-foreground ml-2\">from last month</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Passed Tests</p>\n              <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-passed-tests\">\n                {stats.passedTests}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">{successRate}%</span>\n            <span className=\"text-muted-foreground ml-2\">success rate</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Failed Tests</p>\n              <p className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-failed-tests\">\n                {stats.failedTests}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <XCircle className=\"w-6 h-6 text-red-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-red-600 font-medium\">-3%</span>\n            <span className=\"text-muted-foreground ml-2\">from last month</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Running Tests</p>\n              <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-running-tests\">\n                {stats.runningTests}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <Clock className=\"w-6 h-6 text-yellow-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-yellow-600 font-medium\">{activeRate}%</span>\n            <span className=\"text-muted-foreground ml-2\">currently active</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5425},"client/src/components/mobile-header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, \n  FileText, \n  Archive, \n  Zap, \n  BarChart3\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Test Cases\", href: \"/test-cases\", icon: FileText },\n  { name: \"Test Suites\", href: \"/test-suites\", icon: Archive },\n  { name: \"Test Runs\", href: \"/test-runs\", icon: Zap },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n];\n\nexport default function MobileHeader() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  return (\n    <>\n      <header className=\"lg:hidden bg-card border-b border-border p-4 relative z-50\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-lg font-bold text-primary\" data-testid=\"mobile-app-title\">TestFlow</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"mobile-menu-toggle\"\n            className=\"relative z-10\"\n          >\n            {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </Button>\n        </div>\n      </header>\n\n      {isMenuOpen && (\n        <div className=\"lg:hidden bg-card border-b border-border relative z-40\">\n          <nav className=\"p-4 space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <a \n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n                      isActive\n                        ? \"bg-accent text-accent-foreground font-medium\"\n                        : \"hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    onClick={() => setIsMenuOpen(false)}\n                    data-testid={`mobile-nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    <span>{item.name}</span>\n                  </a>\n                </Link>\n              );\n            })}\n          </nav>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":2503},"client/src/components/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { CheckCircle, XCircle, Plus, Clock } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface ActivityItem {\n  id: string;\n  type: 'test_passed' | 'test_failed' | 'test_created' | 'test_started';\n  testCaseName: string;\n  suiteName?: string;\n  timestamp: string;\n  message: string;\n}\n\nexport default function RecentActivity() {\n  const { data: activity, isLoading } = useQuery<ActivityItem[]>({\n    queryKey: [\"/api/dashboard/activity\"],\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'test_passed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'test_failed':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'test_created':\n        return <Plus className=\"w-4 h-4 text-blue-600\" />;\n      case 'test_started':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getActivityBgColor = (type: string) => {\n    switch (type) {\n      case 'test_passed':\n        return 'bg-green-100';\n      case 'test_failed':\n        return 'bg-red-100';\n      case 'test_created':\n        return 'bg-blue-100';\n      case 'test_started':\n        return 'bg-yellow-100';\n      default:\n        return 'bg-gray-100';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  return (\n    <Card className=\"bg-card rounded-lg border border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-foreground\">\n            Recent Activity\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-sm text-primary hover:text-primary/80\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-3\">\n                <Skeleton className=\"w-8 h-8 rounded-full\" />\n                <div className=\"flex-1 space-y-1\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : !activity || activity.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-activity\">\n            No recent activity found\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {activity.map((item) => (\n              <div key={item.id} className=\"flex items-start space-x-3\" data-testid=\"activity-item\">\n                <div className={`w-8 h-8 ${getActivityBgColor(item.type)} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  {getActivityIcon(item.type)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground\" data-testid=\"activity-message\">\n                    {item.message}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"activity-details\">\n                    {item.suiteName ? `${item.suiteName} • ` : ''}{formatTimeAgo(item.timestamp)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4161},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  FileText, \n  TestTube2,\n  Archive, \n  Zap, \n  BarChart3,\n  ClipboardList\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Requirements\", href: \"/requirements\", icon: ClipboardList },\n  { name: \"Test Scenarios\", href: \"/test-scenarios\", icon: TestTube2 },\n  { name: \"Test Cases\", href: \"/test-cases\", icon: FileText },\n  { name: \"Test Suites\", href: \"/test-suites\", icon: Archive },\n  { name: \"Test Runs\", href: \"/test-runs\", icon: Zap },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col hidden lg:flex\">\n      <div className=\"p-6 border-b border-border\">\n        <h1 className=\"text-xl font-bold text-primary\" data-testid=\"app-title\">TestFlow</h1>\n        <p className=\"text-sm text-muted-foreground\">Test Management Platform</p>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.name} href={item.href} className={cn(\n              \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n              isActive\n                ? \"bg-accent text-accent-foreground font-medium\"\n                : \"hover:bg-accent hover:text-accent-foreground\"\n            )} data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}>\n              <Icon className=\"w-5 h-5\" />\n              <span>{item.name}</span>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n            JD\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">John Doe</p>\n            <p className=\"text-xs text-muted-foreground truncate\">QA Engineer</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2371},"client/src/components/test-case-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { X, Plus } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TestSuite } from \"@shared/schema\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Test case name is required\"),\n  description: z.string().optional(),\n  suiteId: z.string().min(1, \"Test suite is required\"),\n  priority: z.enum([\"high\", \"medium\", \"low\"]),\n});\n\ninterface TestCaseModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TestCaseModal({ isOpen, onClose }: TestCaseModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      suiteId: \"\",\n      priority: \"medium\",\n    },\n  });\n\n  const { data: testSuites, isLoading: suitesLoading } = useQuery<TestSuite[]>({\n    queryKey: [\"/api/test-suites\"],\n    enabled: isOpen,\n  });\n\n  const createTestCaseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/test-cases\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test case created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createTestCaseMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"test-case-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Create New Test Case\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"modal-close-button\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Test Case Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter test case name\" \n                      {...field} \n                      data-testid=\"input-test-case-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"suiteId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Test Suite</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-test-suite\">\n                        <SelectValue placeholder=\"Select a test suite\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {suitesLoading ? (\n                        <SelectItem value=\"loading\" disabled>Loading...</SelectItem>\n                      ) : (\n                        testSuites?.map((suite) => (\n                          <SelectItem key={suite.id} value={suite.id}>\n                            {suite.name}\n                          </SelectItem>\n                        ))\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      rows={3} \n                      placeholder=\"Describe what this test validates...\" \n                      {...field} \n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"priority\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Priority</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-priority\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTestCaseMutation.isPending}\n                data-testid=\"button-create-test-case\"\n              >\n                {createTestCaseMutation.isPending ? \"Creating...\" : \"Create Test Case\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7001},"client/src/components/test-cases-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Search, Play, Square, Edit, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TestCaseWithSuite } from \"@shared/schema\";\n\nexport default function TestCasesTable() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: testCases, isLoading } = useQuery<TestCaseWithSuite[]>({\n    queryKey: [\"/api/test-cases\"],\n  });\n\n  const runTestMutation = useMutation({\n    mutationFn: async (testCaseId: string) => {\n      const response = await apiRequest(\"POST\", `/api/test-cases/${testCaseId}/run`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Started\",\n        description: \"Test execution has begun\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopTestMutation = useMutation({\n    mutationFn: async (testCaseId: string) => {\n      const response = await apiRequest(\"POST\", `/api/test-cases/${testCaseId}/stop`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Stopped\",\n        description: \"Test execution has been stopped\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to stop test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTestMutation = useMutation({\n    mutationFn: async (testCaseId: string) => {\n      await apiRequest(\"DELETE\", `/api/test-cases/${testCaseId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Deleted\",\n        description: \"Test case has been deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete test case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTestCases = testCases?.filter((testCase) => {\n    const matchesSearch = testCase.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         testCase.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         testCase.suite?.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || testCase.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'passed':\n        return <Badge className=\"bg-green-100 text-green-800\">Passed</Badge>;\n      case 'failed':\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\n      case 'running':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Running</Badge>;\n      case 'pending':\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Pending</Badge>;\n    }\n  };\n\n  const formatDuration = (duration: number | null) => {\n    if (!duration) return \"-\";\n    return `${(duration / 1000).toFixed(1)}s`;\n  };\n\n  const formatLastRun = (lastRun: Date | null, status: string) => {\n    if (status === 'running') return \"Running now\";\n    if (!lastRun) return \"Never run\";\n    \n    const date = new Date(lastRun);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Less than an hour ago\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  return (\n    <Card className=\"mt-8 bg-card rounded-lg border border-border\">\n      <CardHeader className=\"px-6 py-4 border-b border-border\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Test Cases</h3>\n          <div className=\"mt-4 sm:mt-0 flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search test cases...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2\"\n                data-testid=\"input-search-test-cases\"\n              />\n              <Search className=\"absolute left-3 top-2.5 w-4 h-4 text-muted-foreground\" />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"passed\">Passed</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"running\">Running</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        {isLoading ? (\n          <div className=\"space-y-4 p-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4\">\n                <Skeleton className=\"h-4 w-48\" />\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-16\" />\n                <Skeleton className=\"h-4 w-32\" />\n              </div>\n            ))}\n          </div>\n        ) : !filteredTestCases || filteredTestCases.length === 0 ? (\n          <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"no-test-cases\">\n            {testCases?.length === 0 ? \"No test cases found\" : \"No test cases match your filters\"}\n          </div>\n        ) : (\n          <>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-muted\">\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Test Case\n                    </TableHead>\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Suite\n                    </TableHead>\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Status\n                    </TableHead>\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Last Run\n                    </TableHead>\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Duration\n                    </TableHead>\n                    <TableHead className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Actions\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody className=\"bg-card divide-y divide-border\">\n                  {filteredTestCases.map((testCase) => (\n                    <TableRow key={testCase.id} className=\"hover:bg-accent/50\" data-testid=\"test-case-row\">\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-foreground\" data-testid=\"test-case-name\">\n                          {testCase.name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid=\"test-case-id\">\n                          {testCase.id.slice(0, 8)}...\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\" data-testid=\"test-case-suite\">\n                        {testCase.suite?.name || \"No suite\"}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap\" data-testid=\"test-case-status\">\n                        {getStatusBadge(testCase.status)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\" data-testid=\"test-case-last-run\">\n                        {formatLastRun(testCase.lastRun, testCase.status)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\" data-testid=\"test-case-duration\">\n                        {formatDuration(testCase.duration)}\n                      </TableCell>\n                      <TableCell className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-edit-test-case\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        {testCase.status === 'running' ? (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => stopTestMutation.mutate(testCase.id)}\n                            disabled={stopTestMutation.isPending}\n                            data-testid=\"button-stop-test-case\"\n                          >\n                            <Square className=\"w-4 h-4\" />\n                          </Button>\n                        ) : (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => runTestMutation.mutate(testCase.id)}\n                            disabled={runTestMutation.isPending}\n                            data-testid=\"button-run-test-case\"\n                          >\n                            <Play className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteTestMutation.mutate(testCase.id)}\n                          disabled={deleteTestMutation.isPending}\n                          className=\"text-destructive hover:text-destructive/80\"\n                          data-testid=\"button-delete-test-case\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            \n            <div className=\"px-6 py-4 bg-muted/30 border-t border-border\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"pagination-info\">\n                  Showing 1-{filteredTestCases.length} of {testCases?.length || 0} test cases\n                </p>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-previous-page\">\n                    Previous\n                  </Button>\n                  <Button variant=\"default\" size=\"sm\" data-testid=\"button-current-page\">\n                    1\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-next-page\">\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13170},"client/src/components/test-suites-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { TestSuiteWithStats } from \"@shared/schema\";\n\nexport default function TestSuitesOverview() {\n  const { data: suites, isLoading } = useQuery<TestSuiteWithStats[]>({\n    queryKey: [\"/api/test-suites/with-stats\"],\n  });\n\n  const getStatusBadge = (suite: TestSuiteWithStats) => {\n    if (suite.runningTests > 0) {\n      return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Running</Badge>;\n    } else if (suite.totalTests > 0) {\n      return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n    } else {\n      return <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-800\">Pending</Badge>;\n    }\n  };\n\n  const formatLastRun = (suite: TestSuiteWithStats) => {\n    if (suite.runningTests > 0) {\n      return \"Currently running\";\n    } else if (suite.totalTests > 0) {\n      return \"2 hours ago\"; // Mock data for demo\n    } else {\n      return \"Never run\";\n    }\n  };\n\n  return (\n    <Card className=\"bg-card rounded-lg border border-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-foreground\">\n            Test Suites\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-sm text-primary hover:text-primary/80\">\n            Manage Suites\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"p-4 bg-secondary/30 rounded-lg space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton className=\"h-5 w-32\" />\n                  <Skeleton className=\"h-5 w-16\" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-4 w-28\" />\n                </div>\n                <Skeleton className=\"h-2 w-full\" />\n                <Skeleton className=\"h-3 w-20\" />\n              </div>\n            ))}\n          </div>\n        ) : !suites || suites.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-suites\">\n            No test suites found\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {suites.map((suite) => (\n              <div key={suite.id} className=\"p-4 bg-secondary/30 rounded-lg\" data-testid=\"suite-card\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-foreground\" data-testid=\"suite-name\">\n                    {suite.name}\n                  </h4>\n                  {getStatusBadge(suite)}\n                </div>\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span data-testid=\"suite-test-count\">{suite.totalTests} test cases</span>\n                  <span data-testid=\"suite-last-run\">{formatLastRun(suite)}</span>\n                </div>\n                <div className=\"mt-2\">\n                  <Progress value={suite.passRate} className=\"w-full h-2\" />\n                </div>\n                <div className=\"mt-1 text-xs text-muted-foreground\" data-testid=\"suite-pass-rate\">\n                  {suite.passRate}% pass rate\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3857},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Plus, Download, ClipboardList, TestTube2, FileText } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport DashboardStats from \"@/components/dashboard-stats\";\nimport RecentActivity from \"@/components/recent-activity\";\nimport TestSuitesOverview from \"@/components/test-suites-overview\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Dashboard</h2>\n              <p className=\"text-muted-foreground\">Overview of your test management activities</p>\n            </div>\n            <div className=\"mt-4 sm:mt-0 flex flex-wrap gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation(\"/requirements\")} \n                data-testid=\"button-new-requirement\"\n              >\n                <ClipboardList className=\"w-4 h-4 mr-2\" />\n                New Requirement\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation(\"/test-scenarios\")} \n                data-testid=\"button-new-scenario\"\n              >\n                <TestTube2 className=\"w-4 h-4 mr-2\" />\n                New Scenario\n              </Button>\n              <Button onClick={() => setLocation(\"/test-cases\")} data-testid=\"button-new-test-case\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                New Test Case\n              </Button>\n              <Button variant=\"secondary\" data-testid=\"button-export-report\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          <DashboardStats />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <RecentActivity />\n            <TestSuitesOverview />\n          </div>\n        </div>\n      </main>\n\n    </div>\n  );\n}\n","size_bytes":2424},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { BarChart3, Download, TrendingUp, Calendar } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { TestSuiteWithStats } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  runningTests: number;\n  pendingTests: number;\n}\n\nexport default function Reports() {\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: testSuites } = useQuery<TestSuiteWithStats[]>({\n    queryKey: [\"/api/test-suites/with-stats\"],\n  });\n\n  const successRate = stats && stats.totalTests > 0 ? Math.round((stats.passedTests / stats.totalTests) * 100) : 0;\n  const completedTests = stats ? stats.passedTests + stats.failedTests : 0;\n  const completionRate = stats && stats.totalTests > 0 ? Math.round((completedTests / stats.totalTests) * 100) : 0;\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Reports</h2>\n              <p className=\"text-muted-foreground\">\n                Analytics and insights for your test execution\n              </p>\n            </div>\n            <div className=\"mt-4 sm:mt-0 flex space-x-3\">\n              <Select defaultValue=\"last-30-days\">\n                <SelectTrigger className=\"w-40\" data-testid=\"select-time-range\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"last-7-days\">Last 7 days</SelectItem>\n                  <SelectItem value=\"last-30-days\">Last 30 days</SelectItem>\n                  <SelectItem value=\"last-90-days\">Last 90 days</SelectItem>\n                  <SelectItem value=\"all-time\">All time</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"secondary\" data-testid=\"button-export-report\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Success Rate\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-green-600\" data-testid=\"metric-success-rate\">\n                  {successRate}%\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {stats?.passedTests || 0} of {stats?.totalTests || 0} tests passed\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Completion Rate\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-blue-600\" data-testid=\"metric-completion-rate\">\n                  {completionRate}%\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {completedTests} of {stats?.totalTests || 0} tests completed\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Active Tests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-yellow-600\" data-testid=\"metric-active-tests\">\n                  {stats?.runningTests || 0}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Currently running tests\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Test Suite Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Suite Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!testSuites || testSuites.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No test suites available for reporting\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {testSuites.map((suite) => (\n                    <div key={suite.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid=\"suite-performance\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\" data-testid=\"suite-name\">{suite.name}</h4>\n                        <div className=\"flex items-center space-x-4 mt-2 text-sm text-muted-foreground\">\n                          <span data-testid=\"suite-total-tests\">{suite.totalTests} tests</span>\n                          <span className=\"text-green-600\" data-testid=\"suite-passed-tests\">{suite.passedTests} passed</span>\n                          <span className=\"text-red-600\" data-testid=\"suite-failed-tests\">{suite.failedTests} failed</span>\n                          {suite.runningTests > 0 && (\n                            <span className=\"text-yellow-600\" data-testid=\"suite-running-tests\">{suite.runningTests} running</span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-semibold\" data-testid=\"suite-pass-rate\">\n                          {suite.passRate}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">pass rate</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Test Execution Trends */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Execution Trends</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <BarChart3 className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium mb-2\">Charts Coming Soon</h3>\n                <p>Advanced analytics and trend charts will be available in a future update</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7581},"client/src/pages/test-cases.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, FileText, AlertCircle, Clock, User, Flag, Code, CheckCircle, XCircle, AlertTriangle, Minus } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TestCase, TestScenario } from \"@shared/schema\";\nimport { insertTestCaseSchema } from \"@shared/schema\";\n\nconst formSchema = insertTestCaseSchema.extend({\n  testSteps: z.string().optional(), // Handle as string in form, convert to JSON in submission\n});\n\nexport default function TestCases() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingTestCase, setEditingTestCase] = useState<TestCase | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      testCaseId: \"\",\n      title: \"\",\n      linkedScenarioId: \"\",\n      preconditions: \"\",\n      testSteps: \"\",\n      testData: \"\",\n      expectedResult: \"\",\n      actualResult: \"\",\n      executionStatus: \"not_executed\",\n      priority: \"medium\",\n      module: \"\",\n      testType: \"\",\n      postConditions: \"\",\n      author: \"\",\n      automationStatus: \"manual\",\n      automationScriptId: \"\",\n      comments: \"\",\n    },\n  });\n\n  const { data: testCases, isLoading, isError, error } = useQuery<TestCase[]>({\n    queryKey: [\"/api/test-cases\"],\n  });\n\n  const { data: scenarios } = useQuery<TestScenario[]>({\n    queryKey: [\"/api/test-scenarios\"],\n  });\n\n  const createTestCaseMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      // Convert testSteps string to JSON array if provided\n      const processedData = {\n        ...data,\n        testSteps: data.testSteps ? [{ step: 1, action: data.testSteps }] : null,\n      };\n      const response = await apiRequest(\"POST\", \"/api/test-cases\", processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test case created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      form.reset();\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTestCaseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof formSchema> }) => {\n      const processedData = {\n        ...data,\n        testSteps: data.testSteps ? [{ step: 1, action: data.testSteps }] : null,\n      };\n      const response = await apiRequest(\"PUT\", `/api/test-cases/${id}`, processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Case Updated\",\n        description: \"Test case has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n      form.reset();\n      setEditingTestCase(null);\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update test case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTestCaseMutation = useMutation({\n    mutationFn: async (testCaseId: string) => {\n      await apiRequest(\"DELETE\", `/api/test-cases/${testCaseId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Case Deleted\",\n        description: \"Test case has been deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-cases\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete test case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    if (editingTestCase) {\n      updateTestCaseMutation.mutate({ id: editingTestCase.id, data });\n    } else {\n      createTestCaseMutation.mutate(data);\n    }\n  };\n\n  const handleEditTestCase = (testCase: TestCase) => {\n    setEditingTestCase(testCase);\n    form.reset({\n      testCaseId: testCase.testCaseId || \"\",\n      title: testCase.title || \"\",\n      linkedScenarioId: testCase.linkedScenarioId || \"\",\n      preconditions: testCase.preconditions || \"\",\n      testSteps: Array.isArray(testCase.testSteps) && testCase.testSteps.length > 0 \n        ? testCase.testSteps[0]?.action || \"\" \n        : \"\",\n      testData: testCase.testData || \"\",\n      expectedResult: testCase.expectedResult || \"\",\n      actualResult: testCase.actualResult || \"\",\n      executionStatus: testCase.executionStatus as \"pass\" | \"fail\" | \"blocked\" | \"not_executed\",\n      priority: testCase.priority as \"high\" | \"medium\" | \"low\",\n      module: testCase.module || \"\",\n      testType: testCase.testType || \"\",\n      postConditions: testCase.postConditions || \"\",\n      author: testCase.author || \"\",\n      automationStatus: testCase.automationStatus as \"manual\" | \"automated\" | \"to_be_automated\",\n      automationScriptId: testCase.automationScriptId || \"\",\n      comments: testCase.comments || \"\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setEditingTestCase(null);\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">High</Badge>;\n      case \"medium\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Medium</Badge>;\n      case \"low\":\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Low</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\">Unknown</Badge>;\n    }\n  };\n\n  const getExecutionStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pass\":\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"><CheckCircle className=\"w-3 h-3 mr-1\" />Pass</Badge>;\n      case \"fail\":\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"><XCircle className=\"w-3 h-3 mr-1\" />Fail</Badge>;\n      case \"blocked\":\n        return <Badge className=\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Blocked</Badge>;\n      case \"not_executed\":\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\"><Minus className=\"w-3 h-3 mr-1\" />Not Executed</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\">Unknown</Badge>;\n    }\n  };\n\n  const getAutomationStatusBadge = (status: string) => {\n    switch (status) {\n      case \"automated\":\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\"><Code className=\"w-3 h-3 mr-1\" />Automated</Badge>;\n      case \"manual\":\n        return <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">Manual</Badge>;\n      case \"to_be_automated\":\n        return <Badge className=\"bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200\">To be Automated</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Test Cases</h2>\n              <p className=\"text-muted-foreground\">\n                Manage and organize your test cases ({testCases?.length || 0} total)\n              </p>\n            </div>\n            <div className=\"mt-4 sm:mt-0\">\n              <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-test-case\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Test Case\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>{editingTestCase ? \"Edit Test Case\" : \"Create New Test Case\"}</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      {/* Core/Mandatory Fields */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-medium text-foreground border-b pb-2\">Core Information</h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"testCaseId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Test Case ID *</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    placeholder=\"e.g., TC_LOGIN_01\" \n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-test-case-id\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"linkedScenarioId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Linked Scenario</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-linked-scenario\">\n                                      <SelectValue placeholder=\"Select a scenario\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {scenarios?.map((scenario) => (\n                                      <SelectItem key={scenario.id} value={scenario.id}>\n                                        {scenario.scenarioId} - {scenario.title}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Test Case Description/Title *</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Clear summary of the specific condition being tested\" \n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-test-case-title\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"preconditions\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Preconditions</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Requirements that must be met before execution\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-preconditions\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"postConditions\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Post Conditions</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"State of the system after the test runs\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-post-conditions\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"testSteps\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Test Steps</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Detailed, sequential actions to perform\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-test-steps\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"testData\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Test Data</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Specific input values to use\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-test-data\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"expectedResult\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Expected Result</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Specific, observable outcome that should happen\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-expected-result\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"actualResult\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Actual Result</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"To be filled during execution\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-actual-result\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"executionStatus\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Execution Status</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-execution-status\">\n                                    <SelectValue placeholder=\"Select execution status\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"not_executed\">Not Executed</SelectItem>\n                                  <SelectItem value=\"pass\">Pass</SelectItem>\n                                  <SelectItem value=\"fail\">Fail</SelectItem>\n                                  <SelectItem value=\"blocked\">Blocked</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Additional Fields */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-medium text-foreground border-b pb-2\">Additional Information</h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"priority\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Priority</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-priority\">\n                                      <SelectValue placeholder=\"Select priority\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"high\">High</SelectItem>\n                                    <SelectItem value=\"medium\">Medium</SelectItem>\n                                    <SelectItem value=\"low\">Low</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"module\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Module/Feature</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    placeholder=\"Component under test\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-module\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"testType\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Test Type</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-test-type\">\n                                      <SelectValue placeholder=\"Select test type\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"positive\">Positive</SelectItem>\n                                    <SelectItem value=\"negative\">Negative</SelectItem>\n                                    <SelectItem value=\"boundary_value\">Boundary Value</SelectItem>\n                                    <SelectItem value=\"smoke\">Smoke</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"author\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Author</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    placeholder=\"Test case creator\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                    data-testid=\"input-author\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"automationStatus\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Automation Status</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-automation-status\">\n                                      <SelectValue placeholder=\"Select automation status\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"manual\">Manual</SelectItem>\n                                    <SelectItem value=\"automated\">Automated</SelectItem>\n                                    <SelectItem value=\"to_be_automated\">To be Automated</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"automationScriptId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Automation Script ID</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Link to automated test script\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-automation-script-id\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"comments\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Comments/Notes</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Additional information, notes, or reasons for failure\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-comments\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-4 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleCloseModal}\n                          data-testid=\"button-cancel-test-case\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createTestCaseMutation.isPending || updateTestCaseMutation.isPending}\n                          data-testid=\"button-save-test-case\"\n                        >\n                          {editingTestCase ? \"Update\" : \"Create\"} Test Case\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 overflow-auto\">\n          {isError ? (\n            <div className=\"text-center py-12\">\n              <AlertCircle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-destructive mb-2\">Failed to load test cases</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {error instanceof Error ? error.message : \"An error occurred while fetching test cases\"}\n              </p>\n              <Button onClick={() => window.location.reload()} data-testid=\"button-retry-test-cases\">\n                Try Again\n              </Button>\n            </div>\n          ) : isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-5/6 mb-4\"></div>\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : testCases && testCases.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No test cases yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create your first test case to start organizing your testing strategy.\n              </p>\n              <Button onClick={() => setIsModalOpen(true)} data-testid=\"button-create-first-test-case\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Test Case\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {testCases?.map((testCase) => (\n                <Card key={testCase.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-test-case-${testCase.id}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <CardTitle className=\"text-lg font-semibold text-foreground line-clamp-2\">\n                        {testCase.testCaseId && (\n                          <span className=\"text-sm font-medium text-muted-foreground block mb-1\">\n                            {testCase.testCaseId}\n                          </span>\n                        )}\n                        {testCase.title || testCase.name}\n                      </CardTitle>\n                      <div className=\"flex space-x-1\">\n                        {getPriorityBadge(testCase.priority)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2 mb-3\">\n                      {getExecutionStatusBadge(testCase.executionStatus)}\n                      {getAutomationStatusBadge(testCase.automationStatus)}\n                    </div>\n                    \n                    {(testCase.description || testCase.expectedResult) && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-3 mb-3\">\n                        {testCase.description || testCase.expectedResult}\n                      </p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      {testCase.module && (\n                        <div className=\"flex items-center\">\n                          <Flag className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground\">{testCase.module}</span>\n                        </div>\n                      )}\n                      \n                      {testCase.testType && (\n                        <div className=\"flex items-center\">\n                          <FileText className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground capitalize\">\n                            {testCase.testType.replace('_', ' ')}\n                          </span>\n                        </div>\n                      )}\n                      \n                      {testCase.author && (\n                        <div className=\"flex items-center\">\n                          <User className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground\">{testCase.author}</span>\n                        </div>\n                      )}\n                      \n                      {testCase.dateCreated && (\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(testCase.dateCreated).toLocaleDateString()}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex justify-between pt-4 border-t\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => handleEditTestCase(testCase)}\n                        data-testid={`button-edit-test-case-${testCase.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 mr-2\" />\n                        Edit\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => deleteTestCaseMutation.mutate(testCase.id)}\n                        disabled={deleteTestCaseMutation.isPending}\n                        className=\"text-destructive hover:text-destructive/80\"\n                        data-testid={`button-delete-test-case-${testCase.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":35710},"client/src/pages/test-runs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Play, Square, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { TestRun } from \"@shared/schema\";\n\nexport default function TestRuns() {\n  const { data: testRuns, isLoading } = useQuery<TestRun[]>({\n    queryKey: [\"/api/test-runs\"],\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      case 'passed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'failed':\n        return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'aborted':\n        return <Square className=\"w-4 h-4 text-gray-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'running':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Running</Badge>;\n      case 'passed':\n        return <Badge className=\"bg-green-100 text-green-800\">Passed</Badge>;\n      case 'failed':\n        return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\n      case 'aborted':\n        return <Badge className=\"bg-gray-100 text-gray-800\">Aborted</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Unknown</Badge>;\n    }\n  };\n\n  const formatDuration = (startTime: Date | null, endTime: Date | null, duration: number | null) => {\n    if (duration) {\n      return `${(duration / 1000).toFixed(1)}s`;\n    }\n    \n    if (!startTime) return \"-\";\n    \n    if (!endTime) {\n      const start = new Date(startTime);\n      const now = new Date();\n      const diffMs = now.getTime() - start.getTime();\n      return `${(diffMs / 1000).toFixed(1)}s (running)`;\n    }\n    \n    const start = new Date(startTime);\n    const end = new Date(endTime);\n    const diffMs = end.getTime() - start.getTime();\n    return `${(diffMs / 1000).toFixed(1)}s`;\n  };\n\n  const formatDateTime = (date: Date | null) => {\n    if (!date) return \"-\";\n    return new Date(date).toLocaleString();\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Test Runs</h2>\n              <p className=\"text-muted-foreground\">\n                History of all test executions ({testRuns?.length || 0} runs)\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Play className=\"w-5 h-5\" />\n                <span>Test Execution History</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-4 w-8\" />\n                      <Skeleton className=\"h-4 w-48\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-4 w-32\" />\n                    </div>\n                  ))}\n                </div>\n              ) : !testRuns || testRuns.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"no-test-runs\">\n                  <Play className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No test runs found</h3>\n                  <p>Test runs will appear here once you start executing tests</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Test Case ID</TableHead>\n                        <TableHead>Started</TableHead>\n                        <TableHead>Completed</TableHead>\n                        <TableHead>Duration</TableHead>\n                        <TableHead>Error Message</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {testRuns.map((run) => (\n                        <TableRow key={run.id} data-testid=\"test-run-row\">\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusIcon(run.status)}\n                              {getStatusBadge(run.status)}\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"font-mono text-sm\" data-testid=\"test-run-case-id\">\n                            {run.testCaseId ? run.testCaseId.slice(0, 8) + '...' : 'N/A'}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid=\"test-run-start-time\">\n                            {formatDateTime(run.startTime)}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid=\"test-run-end-time\">\n                            {run.endTime ? formatDateTime(run.endTime) : \"-\"}\n                          </TableCell>\n                          <TableCell className=\"text-sm\" data-testid=\"test-run-duration\">\n                            {formatDuration(run.startTime, run.endTime, run.duration)}\n                          </TableCell>\n                          <TableCell className=\"text-sm max-w-xs truncate\" data-testid=\"test-run-error\">\n                            {run.errorMessage || \"-\"}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6758},"client/src/pages/test-suites.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TestSuiteWithStats } from \"@shared/schema\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Suite name is required\"),\n  description: z.string().optional(),\n  status: z.enum([\"active\", \"inactive\", \"archived\"]).default(\"active\"),\n});\n\nexport default function TestSuites() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingSuite, setEditingSuite] = useState<TestSuiteWithStats | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      status: \"active\",\n    },\n  });\n\n  const { data: testSuites, isLoading } = useQuery<TestSuiteWithStats[]>({\n    queryKey: [\"/api/test-suites/with-stats\"],\n  });\n\n  const createSuiteMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/test-suites\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test suite created successfully\",\n      });\n      // Invalidate both test suite queries to ensure UI updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites/with-stats\"] });\n      form.reset();\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test suite\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSuiteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof formSchema> }) => {\n      const response = await apiRequest(\"PUT\", `/api/test-suites/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test suite updated successfully\",\n      });\n      // Invalidate both test suite queries to ensure UI updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites/with-stats\"] });\n      form.reset();\n      setEditingSuite(null);\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update test suite\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSuiteMutation = useMutation({\n    mutationFn: async (suiteId: string) => {\n      await apiRequest(\"DELETE\", `/api/test-suites/${suiteId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Suite Deleted\",\n        description: \"Test suite has been deleted\",\n      });\n      // Invalidate both test suite queries to ensure UI updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-suites/with-stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete test suite\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    if (editingSuite) {\n      updateSuiteMutation.mutate({ id: editingSuite.id, data });\n    } else {\n      createSuiteMutation.mutate(data);\n    }\n  };\n\n  const handleEditSuite = (suite: TestSuiteWithStats) => {\n    setEditingSuite(suite);\n    form.reset({\n      name: suite.name,\n      description: suite.description || \"\",\n      status: suite.status as \"active\" | \"inactive\" | \"archived\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCancelEdit = () => {\n    setEditingSuite(null);\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const getStatusBadge = (suite: TestSuiteWithStats) => {\n    if (suite.runningTests > 0) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Running</Badge>;\n    } else if (suite.totalTests > 0) {\n      return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n    } else {\n      return <Badge className=\"bg-gray-100 text-gray-800\">Inactive</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Test Suites</h2>\n              <p className=\"text-muted-foreground\">\n                Organize your tests into logical groups ({testSuites?.length || 0} suites)\n              </p>\n            </div>\n            <div className=\"mt-4 sm:mt-0\">\n              <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-test-suite\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Test Suite\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>{editingSuite ? \"Edit Test Suite\" : \"Create New Test Suite\"}</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Suite Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter suite name\" \n                                {...field} \n                                data-testid=\"input-suite-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                rows={3} \n                                placeholder=\"Describe this test suite...\" \n                                {...field} \n                                data-testid=\"textarea-suite-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"flex justify-end space-x-3 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleCancelEdit}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createSuiteMutation.isPending || updateSuiteMutation.isPending}\n                          data-testid={editingSuite ? \"button-update-suite\" : \"button-create-suite\"}\n                        >\n                          {editingSuite ? (\n                            updateSuiteMutation.isPending ? \"Updating...\" : \"Update Suite\"\n                          ) : (\n                            createSuiteMutation.isPending ? \"Creating...\" : \"Create Suite\"\n                          )}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3 mb-4\"></div>\n                    <div className=\"h-2 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !testSuites || testSuites.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No test suites found</h3>\n              <p className=\"text-muted-foreground mb-6\">Get started by creating your first test suite</p>\n              <Button onClick={() => setIsModalOpen(true)} data-testid=\"button-create-first-suite\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Test Suite\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {testSuites.map((suite) => (\n                <Card key={suite.id} className=\"hover:shadow-md transition-shadow\" data-testid=\"suite-card\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\" data-testid=\"suite-name\">{suite.name}</CardTitle>\n                      {getStatusBadge(suite)}\n                    </div>\n                    {suite.description && (\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"suite-description\">\n                        {suite.description}\n                      </p>\n                    )}\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Test Cases</span>\n                        <span className=\"font-medium\" data-testid=\"suite-test-count\">{suite.totalTests}</span>\n                      </div>\n                      \n                      {suite.totalTests > 0 && (\n                        <>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-green-600\">Passed: {suite.passedTests}</span>\n                              <span className=\"text-red-600\">Failed: {suite.failedTests}</span>\n                            </div>\n                            <Progress value={suite.passRate} className=\"h-2\" />\n                            <div className=\"text-center text-sm text-muted-foreground\" data-testid=\"suite-pass-rate\">\n                              {suite.passRate}% pass rate\n                            </div>\n                          </div>\n                        </>\n                      )}\n                      \n                      <div className=\"flex justify-between pt-4 border-t\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleEditSuite(suite)}\n                          data-testid=\"button-edit-suite\"\n                        >\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteSuiteMutation.mutate(suite.id)}\n                          disabled={deleteSuiteMutation.isPending}\n                          className=\"text-destructive hover:text-destructive/80\"\n                          data-testid=\"button-delete-suite\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13930},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"promptGenerators/generateScenarioPrompt.js":{"content":"/**\n * Prompt generator for creating test scenarios from requirements\n * Generates AI prompts to produce structured test scenarios\n */\n\n/**\n * Generate a comprehensive prompt for AI to create test scenarios based on a requirement\n * @param {Object} requirement - The requirement object\n * @param {string} requirement.id - Unique requirement identifier\n * @param {string} requirement.title - Requirement title\n * @param {string} requirement.description - Detailed requirement description\n * @returns {string} - Formatted prompt for AI to generate test scenarios\n */\nfunction generateScenarioPrompt(requirement) {\n  if (!requirement || !requirement.id || !requirement.title) {\n    throw new Error('Invalid requirement: must have id and title properties');\n  }\n\n  const { id, title, description = '' } = requirement;\n  \n  // Normalize ID for scenario naming (uppercase and remove non-alphanumeric)\n  const normalizedId = String(id).toUpperCase().replace(/[^A-Z0-9]/g, '');\n  if (!normalizedId) {\n    throw new Error('Requirement ID must contain at least one alphanumeric character');\n  }\n  \n  const prompt = `You are a senior QA analyst with 10+ years of experience in software testing and test case design. Your expertise includes functional testing, integration testing, regression testing, and boundary testing.\n\nTASK: Analyze the following requirement and generate between 3 and 5 comprehensive test scenarios that thoroughly cover the requirement from different testing perspectives.\n\nREQUIREMENT DETAILS:\n- Requirement ID: ${id}\n- Title: ${title}\n- Description: ${description || 'No detailed description provided'}\n\nINSTRUCTIONS:\n1. Act as a senior QA analyst and think critically about all possible testing angles\n2. Generate between 3 and 5 test scenarios that cover different aspects of this requirement\n3. Each scenario should test a specific behavior or edge case\n4. Include both positive and negative test scenarios where applicable\n5. Consider functional, boundary, error handling, and integration testing aspects\n6. Make scenario IDs follow the pattern: SC_${normalizedId}_01, SC_${normalizedId}_02, etc.\n\nCRITICAL OUTPUT REQUIREMENTS:\n- Return ONLY valid JSON - no code fences, no comments, no additional text\n- No text before or after the JSON object\n- Do not wrap the JSON in markdown code blocks (\\`\\`\\`)\n- Output must be a single JSON object with exactly the structure shown below\n- Do not include any extra keys beyond those specified\n\nREQUIRED OUTPUT FORMAT:\n{\n  \"scenarios\": [\n    {\n      \"scenario_id\": \"SC_${normalizedId}_01\",\n      \"title\": \"Clear, specific scenario title\",\n      \"description\": \"Detailed description of what this scenario tests, including preconditions, actions, and expected outcomes\",\n      \"test_type\": \"Functional|Integration|Regression|Security|Performance|Usability\",\n      \"priority\": \"High|Medium|Low\"\n    }\n  ]\n}\n\nQUALITY CRITERIA:\n- Each scenario must be unique and test different aspects\n- Titles should be clear and descriptive (max 80 characters)\n- Descriptions should be detailed enough for a tester to understand what to test\n- Test types should accurately reflect the nature of the test\n- Priorities should be based on business impact and risk\n- Cover both happy path and edge cases\n- Consider user experience and system behavior\n\nGenerate the test scenarios now:`;\n\n  return prompt;\n}\n\nexport { generateScenarioPrompt };","size_bytes":3377},"promptGenerators/generateTestCasePrompt.js":{"content":"/**\n * Prompt generator for creating test cases from test scenarios\n * Generates AI prompts to produce detailed test cases with comprehensive steps\n */\n\n/**\n * Generate a comprehensive prompt for AI to create test cases based on a test scenario\n * @param {Object} scenario - The test scenario object\n * @param {string} scenario.scenario_id - Unique scenario identifier\n * @param {string} scenario.title - Scenario title\n * @param {string} scenario.description - Detailed scenario description\n * @param {string} scenario.test_type - Type of testing (Functional, Integration, etc.)\n * @param {string} scenario.priority - Priority level (High, Medium, Low)\n * @returns {string} - Formatted prompt for AI to generate test cases\n */\nexport function generateTestCasePrompt(scenario) {\n  if (!scenario || !scenario.scenario_id || !scenario.title) {\n    throw new Error('Invalid scenario: must have scenario_id and title properties');\n  }\n\n  const { \n    scenario_id, \n    title, \n    description = '', \n    test_type = 'Functional', \n    priority = 'Medium' \n  } = scenario;\n  \n  const prompt = `You are a senior QA analyst with 15+ years of experience in detailed test case design and execution. Your expertise includes writing comprehensive, executable test cases that cover all edge cases and provide clear guidance for manual and automated testing.\n\nTASK: Analyze the following test scenario and generate 2-3 detailed, executable test cases that thoroughly cover the scenario requirements.\n\nSCENARIO DETAILS:\n- Scenario ID: ${scenario_id}\n- Title: ${title}\n- Description: ${description || 'No detailed description provided'}\n- Test Type: ${test_type}\n- Priority: ${priority}\n\nINSTRUCTIONS:\n1. Act as a senior QA analyst and design comprehensive test cases\n2. Generate exactly 2-3 detailed test cases that cover different aspects of this scenario\n3. Each test case must be executable by a QA tester with clear, step-by-step instructions\n4. Include both positive flow and edge case/negative testing where applicable\n5. Consider boundary conditions, error handling, and user experience aspects\n6. Make test case titles descriptive and specific to the testing objective\n7. Ensure test steps are atomic, clear, and include expected outcomes for each step\n\nCRITICAL OUTPUT REQUIREMENTS:\n- Return ONLY valid JSON - no code fences, no comments, no additional text\n- No text before or after the JSON object\n- Do not wrap the JSON in markdown code blocks (\\`\\`\\`)\n- Output must be a single JSON object with exactly the structure shown below\n- Do not include any extra keys beyond those specified\n\nREQUIRED JSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"title\": \"Clear, specific test case title describing what is being tested\",\n      \"preconditions\": \"Detailed setup requirements and initial state before test execution\",\n      \"steps\": [\n        \"1. First action step with specific details\",\n        \"2. Second action step with expected immediate result\",\n        \"3. Continue with numbered steps that are atomic and clear\"\n      ],\n      \"test_data\": \"Specific data values, inputs, or parameters needed for the test\",\n      \"expected_result\": \"Clear description of the final expected outcome and success criteria\"\n    }\n  ]\n}\n\nQUALITY REQUIREMENTS FOR EACH TEST CASE:\n- Title: Be specific about what aspect is being tested (max 100 characters)\n- Preconditions: Include system state, user permissions, data setup, environment conditions\n- Steps: Number each step, be specific about actions, include verification points\n- Test Data: Provide actual values, formats, or examples (not just placeholders)\n- Expected Result: Define clear success criteria and observable outcomes\n\nTESTING BEST PRACTICES:\n- Each step should be actionable and verifiable\n- Include both functional verification and UI/UX validation where applicable\n- Consider different user roles, permissions, and access levels if relevant\n- Test both successful flows and failure scenarios\n- Ensure steps can be executed independently by different testers\n- Include timing expectations for performance-related scenarios\n\nGenerate the detailed test cases now:`;\n\n  return prompt;\n}","size_bytes":4127},"services/aiService.js":{"content":"// Using global fetch available in Node.js 18+\n\n/**\n * AI Service for DeepSeek API integration\n * Provides text generation capabilities using DeepSeek's AI models\n */\n\nconst DEEPSEEK_API_ENDPOINT = 'https://api.deepseek.com/v1/chat/completions';\n\n/**\n * Generate AI response using DeepSeek API\n * @param {string} prompt - The input prompt for AI generation\n * @returns {Promise<string>} - The generated text response\n * @throws {Error} - If API request fails or response is invalid\n */\nasync function generateWithAI(prompt) {\n  try {\n    console.log('🤖 Starting AI generation request...');\n    console.log('📝 Prompt length:', prompt.length);\n\n    // Validate input\n    if (!prompt || typeof prompt !== 'string') {\n      throw new Error('Invalid prompt: must be a non-empty string');\n    }\n\n    // Check for API key\n    const apiKey = process.env.DEEPSEEK_API_KEY;\n    if (!apiKey) {\n      throw new Error('DEEPSEEK_API_KEY environment variable is not set');\n    }\n\n    // Prepare request payload\n    const requestBody = {\n      model: 'deepseek-chat',\n      messages: [\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      max_tokens: 2048,\n      temperature: 0.7,\n      stream: false\n    };\n\n    console.log('🌐 Making request to DeepSeek API...');\n\n    // Create AbortController for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n    try {\n      // Make API request with AbortController\n      const response = await fetch(DEEPSEEK_API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`,\n          'User-Agent': 'TestFlow-AI-Service/1.0'\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      console.log('📡 Response status:', response.status);\n\n      // Check response status\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('❌ API Error Response:', errorText);\n        \n        switch (response.status) {\n          case 401:\n            throw new Error('Invalid API key or authentication failed');\n          case 429:\n            throw new Error('Rate limit exceeded. Please try again later');\n          case 500:\n            throw new Error('DeepSeek API server error. Please try again later');\n          default:\n            throw new Error(`DeepSeek API error (${response.status}): ${errorText}`);\n        }\n      }\n\n      // Parse response\n      const data = await response.json();\n      console.log('✅ API response received');\n\n      // Validate response structure\n      if (!data || !data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {\n        console.error('❌ Invalid response structure:', data);\n        throw new Error('Invalid response format from DeepSeek API');\n      }\n\n      const choice = data.choices[0];\n      if (!choice.message || !choice.message.content) {\n        console.error('❌ Missing content in response:', choice);\n        throw new Error('No content found in API response');\n      }\n\n      const generatedText = choice.message.content.trim();\n      \n      console.log('🎉 AI generation completed successfully');\n      console.log('📊 Generated text length:', generatedText.length);\n      console.log('💰 Token usage:', data.usage || 'Not available');\n\n      return generatedText;\n\n    } catch (fetchError) {\n      clearTimeout(timeoutId);\n      throw fetchError;\n    }\n\n  } catch (error) {\n    console.error('🚨 AI Service Error:', error.message);\n    console.error('📍 Error stack:', error.stack);\n\n    // Re-throw with more context\n    if (error.code === 'ENOTFOUND') {\n      throw new Error('Network error: Unable to connect to DeepSeek API. Please check your internet connection.');\n    } else if (error.code === 'ECONNRESET') {\n      throw new Error('Connection reset: DeepSeek API connection was interrupted. Please try again.');\n    } else if (error.name === 'AbortError' || error.code === 'TIMEOUT') {\n      throw new Error('Request timeout: DeepSeek API did not respond within 30 seconds. Please try again.');\n    } else {\n      // Re-throw the original error if it's already formatted\n      throw error;\n    }\n  }\n}\n\n/**\n * Health check for the AI service\n * @returns {Promise<boolean>} - True if service is healthy\n */\nasync function healthCheck() {\n  try {\n    const testPrompt = \"Hello, this is a health check.\";\n    await generateWithAI(testPrompt);\n    return true;\n  } catch (error) {\n    console.error('🏥 AI Service health check failed:', error.message);\n    return false;\n  }\n}\n\n/**\n * Get service status and configuration\n * @returns {object} - Service status information\n */\nfunction getServiceInfo() {\n  return {\n    service: 'DeepSeek AI Service',\n    endpoint: DEEPSEEK_API_ENDPOINT,\n    apiKeyConfigured: !!process.env.DEEPSEEK_API_KEY,\n    version: '1.0.0'\n  };\n}\n\nexport {\n  generateWithAI,\n  healthCheck,\n  getServiceInfo\n};","size_bytes":5093},"client/src/pages/requirements.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Edit, Trash2, FileText } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Requirement } from \"@shared/schema\";\nimport { insertRequirementSchema } from \"@shared/schema\";\n\nconst formSchema = insertRequirementSchema;\n\nexport default function Requirements() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingRequirement, setEditingRequirement] = useState<Requirement | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      requirementId: \"\",\n      title: \"\",\n      description: \"\",\n      module: \"\",\n      priority: \"medium\",\n      author: \"\",\n    },\n  });\n\n  const { data: requirements, isLoading, isError, error } = useQuery<Requirement[]>({\n    queryKey: [\"/api/requirements\"],\n  });\n\n  const createRequirementMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/requirements\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Requirement created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/requirements\"] });\n      form.reset();\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create requirement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRequirementMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof formSchema> }) => {\n      const response = await apiRequest(\"PUT\", `/api/requirements/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Requirement updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/requirements\"] });\n      form.reset();\n      setEditingRequirement(null);\n      setIsModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update requirement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRequirementMutation = useMutation({\n    mutationFn: async (requirementId: string) => {\n      await apiRequest(\"DELETE\", `/api/requirements/${requirementId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Requirement Deleted\",\n        description: \"Requirement has been deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/requirements\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete requirement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    if (editingRequirement) {\n      updateRequirementMutation.mutate({ id: editingRequirement.id, data });\n    } else {\n      createRequirementMutation.mutate(data);\n    }\n  };\n\n  const handleEditRequirement = (requirement: Requirement) => {\n    setEditingRequirement(requirement);\n    form.reset({\n      requirementId: requirement.requirementId || \"\",\n      title: requirement.title,\n      description: requirement.description || \"\",\n      module: requirement.module || \"\",\n      priority: requirement.priority as \"high\" | \"medium\" | \"low\",\n      author: requirement.author,\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCancelEdit = () => {\n    setEditingRequirement(null);\n    form.reset();\n    setIsModalOpen(false);\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">High</Badge>;\n      case \"medium\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Medium</Badge>;\n      case \"low\":\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Low</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n\n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Requirements</h2>\n              <p className=\"text-muted-foreground\">\n                Manage project requirements and specifications ({requirements?.length || 0} requirements)\n              </p>\n            </div>\n            <div className=\"mt-4 sm:mt-0\">\n              <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-requirement\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Requirement\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>{editingRequirement ? \"Edit Requirement\" : \"Create New Requirement\"}</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"requirementId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Requirement ID</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"e.g., REQ-001\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"input-requirement-id\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Title *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter requirement title\" \n                                {...field} \n                                data-testid=\"input-requirement-title\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                rows={3} \n                                placeholder=\"Describe the requirement...\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"textarea-requirement-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"module\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Module</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"e.g., Authentication, User Management\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"input-requirement-module\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"priority\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Priority *</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-requirement-priority\">\n                                  <SelectValue placeholder=\"Select priority\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"author\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Author *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter author name\" \n                                {...field} \n                                data-testid=\"input-requirement-author\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"flex justify-end space-x-3 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleCancelEdit}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createRequirementMutation.isPending || updateRequirementMutation.isPending}\n                          data-testid={editingRequirement ? \"button-update-requirement\" : \"button-create-requirement\"}\n                        >\n                          {editingRequirement ? (\n                            updateRequirementMutation.isPending ? \"Updating...\" : \"Update Requirement\"\n                          ) : (\n                            createRequirementMutation.isPending ? \"Creating...\" : \"Create Requirement\"\n                          )}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {isError ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-destructive mb-2\">Failed to load requirements</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {error instanceof Error ? error.message : \"An error occurred while fetching requirements\"}\n              </p>\n              <Button onClick={() => window.location.reload()} data-testid=\"button-retry-requirements\">\n                Try Again\n              </Button>\n            </div>\n          ) : isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3 mb-4\"></div>\n                    <div className=\"h-2 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/4\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : !requirements || requirements.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No requirements found</h3>\n              <p className=\"text-muted-foreground mb-6\">Get started by creating your first requirement</p>\n              <Button onClick={() => setIsModalOpen(true)} data-testid=\"button-create-first-requirement\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Requirement\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {requirements.map((requirement) => (\n                <Card key={requirement.id} className=\"hover:shadow-md transition-shadow\" data-testid={`requirement-card-${requirement.id}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          {requirement.requirementId && (\n                            <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"requirement-id\">\n                              {requirement.requirementId}\n                            </Badge>\n                          )}\n                          {getPriorityBadge(requirement.priority)}\n                        </div>\n                        <CardTitle className=\"text-lg leading-tight\" data-testid=\"requirement-title\">\n                          {requirement.title}\n                        </CardTitle>\n                      </div>\n                    </div>\n                    {requirement.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid=\"requirement-description\">\n                        {requirement.description}\n                      </p>\n                    )}\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {requirement.module && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Module</span>\n                          <span className=\"font-medium\" data-testid=\"requirement-module\">{requirement.module}</span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Author</span>\n                        <span className=\"font-medium\" data-testid=\"requirement-author\">{requirement.author}</span>\n                      </div>\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Created</span>\n                        <span className=\"font-medium\" data-testid=\"requirement-date\">\n                          {new Date(requirement.dateCreated).toLocaleDateString()}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex justify-between pt-4 border-t\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleEditRequirement(requirement)}\n                          data-testid={`button-edit-requirement-${requirement.id}`}\n                        >\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteRequirementMutation.mutate(requirement.id)}\n                          disabled={deleteRequirementMutation.isPending}\n                          className=\"text-destructive hover:text-destructive/80\"\n                          data-testid={`button-delete-requirement-${requirement.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":19039},"client/src/pages/test-scenarios.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, TestTube2, Edit, Trash2, FileText, Link, User, AlertCircle } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport MobileHeader from \"@/components/mobile-header\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { TestScenario } from \"@shared/schema\";\nimport { insertTestScenarioSchema } from \"@shared/schema\";\n\nconst formSchema = insertTestScenarioSchema;\n\nexport default function TestScenarios() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingScenario, setEditingScenario] = useState<TestScenario | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      scenarioId: \"\",\n      title: \"\",\n      description: \"\",\n      linkedRequirementId: \"\",\n      module: \"\",\n      testType: \"\",\n      priority: \"medium\",\n      author: \"\",\n      reviewer: \"\",\n      status: \"draft\",\n    },\n  });\n\n  const { data: scenarios, isLoading, isError, error } = useQuery<TestScenario[]>({\n    queryKey: [\"/api/test-scenarios\"],\n  });\n\n  const createScenarioMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/test-scenarios\", data);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-scenarios\"] });\n      setIsModalOpen(false);\n      form.reset();\n      setEditingScenario(null);\n      toast({\n        title: \"Success\",\n        description: \"Test scenario created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create test scenario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateScenarioMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      if (!editingScenario) throw new Error(\"No scenario selected for editing\");\n      const response = await apiRequest(\"PUT\", `/api/test-scenarios/${editingScenario.id}`, data);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-scenarios\"] });\n      setIsModalOpen(false);\n      form.reset();\n      setEditingScenario(null);\n      toast({\n        title: \"Success\",\n        description: \"Test scenario updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update test scenario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteScenarioMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/test-scenarios/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-scenarios\"] });\n      toast({\n        title: \"Success\",\n        description: \"Test scenario deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete test scenario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditScenario = (scenario: TestScenario) => {\n    setEditingScenario(scenario);\n    form.reset({\n      scenarioId: scenario.scenarioId || \"\",\n      title: scenario.title,\n      description: scenario.description || \"\",\n      linkedRequirementId: scenario.linkedRequirementId || \"\",\n      module: scenario.module || \"\",\n      testType: scenario.testType || \"\",\n      priority: scenario.priority as \"high\" | \"medium\" | \"low\",\n      author: scenario.author,\n      reviewer: scenario.reviewer || \"\",\n      status: scenario.status as \"draft\" | \"reviewed\" | \"approved\" | \"deprecated\",\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingScenario(null);\n    form.reset();\n  };\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    if (editingScenario) {\n      updateScenarioMutation.mutate(data);\n    } else {\n      createScenarioMutation.mutate(data);\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\": return \"bg-red-500 text-white\";\n      case \"medium\": return \"bg-yellow-500 text-white\";\n      case \"low\": return \"bg-green-500 text-white\";\n      default: return \"bg-gray-500 text-white\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-500 text-white\";\n      case \"reviewed\": return \"bg-blue-500 text-white\";\n      case \"approved\": return \"bg-green-500 text-white\";\n      case \"deprecated\": return \"bg-red-500 text-white\";\n      default: return \"bg-gray-500 text-white\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col\">\n        <MobileHeader />\n        \n        <div className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Test Scenarios</h2>\n              <p className=\"text-muted-foreground\">Manage and organize your test scenarios to ensure comprehensive test coverage</p>\n            </div>\n            <div className=\"mt-4 sm:mt-0\">\n              <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={() => setEditingScenario(null)} data-testid=\"button-create-scenario\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Test Scenario\n                  </Button>\n                </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingScenario ? \"Edit Test Scenario\" : \"Create New Test Scenario\"}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"scenarioId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Scenario ID</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., SC_LOGIN_01\" \n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-scenario-id\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Priority</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"select-scenario-priority\">\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select priority\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"high\">High</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"low\">Low</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"e.g., User Login Validation\" \n                            {...field} \n                            data-testid=\"input-scenario-title\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            rows={3} \n                            placeholder=\"Describe the test scenario...\" \n                            {...field}\n                            value={field.value || \"\"}\n                            data-testid=\"textarea-scenario-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"module\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Module</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., Authentication, User Management\" \n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-scenario-module\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"testType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Test Type</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., Functional, Integration, Regression\" \n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-scenario-test-type\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"author\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Author</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., John Doe\" \n                              {...field} \n                              data-testid=\"input-scenario-author\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"reviewer\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Reviewer</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., Jane Smith\" \n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-scenario-reviewer\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"linkedRequirementId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Linked Requirement ID</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g., REQ-001\" \n                              {...field}\n                              value={field.value || \"\"}\n                              data-testid=\"input-scenario-linked-requirement\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"status\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Status</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"select-scenario-status\">\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select status\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"draft\">Draft</SelectItem>\n                              <SelectItem value=\"reviewed\">Reviewed</SelectItem>\n                              <SelectItem value=\"approved\">Approved</SelectItem>\n                              <SelectItem value=\"deprecated\">Deprecated</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={handleCloseModal}\n                      data-testid=\"button-cancel-scenario\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createScenarioMutation.isPending || updateScenarioMutation.isPending}\n                      data-testid=\"button-save-scenario\"\n                    >\n                      {editingScenario ? \"Update\" : \"Create\"} Test Scenario\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 overflow-auto\">\n          {isError ? (\n            <div className=\"text-center py-12\">\n              <AlertCircle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-destructive mb-2\">Failed to load test scenarios</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {error instanceof Error ? error.message : \"An error occurred while fetching test scenarios\"}\n              </p>\n              <Button onClick={() => window.location.reload()} data-testid=\"button-retry-scenarios\">\n                Try Again\n              </Button>\n            </div>\n          ) : isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-5/6 mb-4\"></div>\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : scenarios && scenarios.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <TestTube2 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-muted-foreground mb-2\">No test scenarios yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create your first test scenario to start organizing your testing strategy.\n              </p>\n              <Button onClick={() => setIsModalOpen(true)} data-testid=\"button-create-first-scenario\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Test Scenario\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {scenarios?.map((scenario) => (\n                <Card key={scenario.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-scenario-${scenario.id}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      {scenario.scenarioId && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {scenario.scenarioId}\n                        </Badge>\n                      )}\n                      <div className=\"flex gap-2\">\n                        <Badge className={getPriorityColor(scenario.priority)}>\n                          {scenario.priority}\n                        </Badge>\n                        <Badge className={getStatusColor(scenario.status)}>\n                          {scenario.status}\n                        </Badge>\n                      </div>\n                    </div>\n                    <CardTitle className=\"text-lg leading-tight\" data-testid={`text-scenario-title-${scenario.id}`}>\n                      {scenario.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      {scenario.description && (\n                        <p className=\"text-sm text-muted-foreground line-clamp-3\" data-testid={`text-scenario-description-${scenario.id}`}>\n                          {scenario.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex flex-wrap gap-2 text-xs text-muted-foreground\">\n                        {scenario.module && (\n                          <span className=\"flex items-center\">\n                            <FileText className=\"w-3 h-3 mr-1\" />\n                            {scenario.module}\n                          </span>\n                        )}\n                        {scenario.testType && (\n                          <span className=\"flex items-center\">\n                            <TestTube2 className=\"w-3 h-3 mr-1\" />\n                            {scenario.testType}\n                          </span>\n                        )}\n                        {scenario.linkedRequirementId && (\n                          <span className=\"flex items-center\">\n                            <Link className=\"w-3 h-3 mr-1\" />\n                            {scenario.linkedRequirementId}\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between pt-2 text-xs text-muted-foreground border-t\">\n                        <span className=\"flex items-center\">\n                          <User className=\"w-3 h-3 mr-1\" />\n                          {scenario.author}\n                        </span>\n                        {scenario.reviewer && (\n                          <span className=\"flex items-center\">\n                            <User className=\"w-3 h-3 mr-1\" />\n                            Rev: {scenario.reviewer}\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex justify-between pt-4 border-t\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleEditScenario(scenario)}\n                          data-testid={`button-edit-scenario-${scenario.id}`}\n                        >\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          Edit\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteScenarioMutation.mutate(scenario.id)}\n                          disabled={deleteScenarioMutation.isPending}\n                          className=\"text-destructive hover:text-destructive/80\"\n                          data-testid={`button-delete-scenario-${scenario.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":23473}},"version":1}